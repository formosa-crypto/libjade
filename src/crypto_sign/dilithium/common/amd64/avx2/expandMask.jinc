require "../fips202.jinc"
require "../packing.jinc"
require "../params.jinc"
from Jade require "common/keccak/keccak1600/amd64/avx2/keccakf1600_4x.jinc"

u256 CONST_0123 = (4u64) [3, 2, 1, 0];

param int y_packed_buflen_gamma1_217 = (Li2_pack_zlen_gamma1_217 / SHAKE256_RATE + 1) * SHAKE256_RATE;
param int y_packed_buflen_gamma1_219 = (Li2_pack_zlen_gamma1_219 / SHAKE256_RATE + 1) * SHAKE256_RATE;

inline
fn expandMask_xof_addr(reg u64 addr, reg u64 lane) -> reg u64
{
	reg u64 v64;

	v64 = addr;
	addr &= 0x7;
	v64 &= 0xFFFFFFFFFFFFFFF8;
	lane <<= 3;
	addr |= lane;
	v64 <<= 2;
	addr |= v64;
	return addr;
}

inline
fn expandMask_poly_shake_init(stack u64[25] state, reg ptr u8[64] rho_prime, stack u16 kappa)
	-> stack u64[25] {
	reg u64 i;
	reg u8 c;
	reg u16 v;

	state = st0(state);
	i = 0;
	while (i < 64) {
		c = rho_prime[(int) i];
		state[u8 (int) i] = c;
		i += 1;
	}

	v = kappa;
	v &= 255;
	c = (8u) v;
	state[u8 64] = c;

	v = kappa;
	v >>= 8;
	c = (8u) v;
	state[u8 65] = c;
	state[u8 66] ^= 0x1f;
	state[u8 SHAKE256_RATE - 1] ^= 0x80;

	return state;
}

inline
fn expandMask_poly_xof_init(stack u256[25] xof, reg ptr u8[64] rho_prime, stack u64 kappa)
	-> stack u256[25] {

	reg u256 v256 v256_zero;
	reg u64 v64;

	inline int ii lane;

	?{}, v256_zero = #set0_256();
	for ii = 0 to 25 {
		xof[ii] = v256_zero;
	}
	for ii = 0 to 8 {
		v64 = rho_prime.[u64 8 * ii];
		v256 = (256u) v64;
		v256 = #VPBROADCAST_4u64(v256);
		xof[ii] = v256;		
	}
	for lane = 0 to 4 {
		v64 = kappa;
		v64 = #LEA_64(0x1F0000 + v64);
		v256 = (256u) v64;
		v256 = #VPBROADCAST_4u64(v256);
		v256 = #VPADD_4u64(v256, CONST_0123);
		xof[8] = v256;
	}
	v64 = 0x8000000000000000;
	v256 = (256u) v64;
	v256 = #VPBROADCAST_4u64(v256);
	xof[16] = v256;

	return xof;
}

inline
fn expandMask_poly_gamma1_217_4x(
	reg ptr u32[4 * Li2_polydeg] f_4x,
	reg ptr u8[64] rho_prime,
	stack u16 kappa)
	-> reg ptr u32[4 * Li2_polydeg]
{
	// TODO: change kappa type to u64
	// TODO: un-inline this function
	// TODO: Ethan wrote this function to always copy complete SHAKE256
	// blocks to the packed-y buffer.  However, we do not have to copy
	// the complete last block.  Fix this.
	reg ptr u32[Li2_polydeg] f;
	stack u8[4 * y_packed_buflen_gamma1_217] y_packed;
	stack u64 y_packed_filled;
	stack u64 output_squeeze_counter;
	stack u256[25] xof;	

	reg u64 addr v64;
	reg u64 i j;
	reg u8 c;

	inline int total_blocks;


	v64 = (64u) kappa;
	xof = expandMask_poly_xof_init(xof, rho_prime, v64);

	y_packed_filled = 0;
	output_squeeze_counter = 0;
	total_blocks = Li2_pack_zlen_gamma1_217 / SHAKE256_RATE + 1;
	while (output_squeeze_counter < total_blocks) {
		xof = _keccakf1600_4x_avx2(xof);

		?{}, i = #set0_64();
		while (i < SHAKE256_RATE) {
			?{}, j = #set0_64();
			while (j < 4) {
				addr = i;
				v64 = j;
				addr = expandMask_xof_addr(addr, v64);
				c = xof[u8 (int) addr];
				addr = y_packed_buflen_gamma1_217;
				addr *= j;
				addr += y_packed_filled;
				addr += i;
				y_packed[(int) addr] = c;
				j += 1;
			}
			i += 1;
		}
		y_packed_filled += SHAKE256_RATE;
		output_squeeze_counter += 1;
	}

	f = f_4x[0 * Li2_polydeg : Li2_polydeg];
	f = polyz_unpack_gamma1_217(f, y_packed[0 * y_packed_buflen_gamma1_217 : Li2_pack_zlen_gamma1_217]);
	f_4x[0 * Li2_polydeg : Li2_polydeg] = f;

	f = f_4x[1 * Li2_polydeg : Li2_polydeg];
	f = polyz_unpack_gamma1_217(f, y_packed[1 * y_packed_buflen_gamma1_217 : Li2_pack_zlen_gamma1_217]);
	f_4x[1 * Li2_polydeg : Li2_polydeg] = f;

	f = f_4x[2 * Li2_polydeg : Li2_polydeg];
	f = polyz_unpack_gamma1_217(f, y_packed[2 * y_packed_buflen_gamma1_217 : Li2_pack_zlen_gamma1_217]);
	f_4x[2 * Li2_polydeg : Li2_polydeg] = f;

	f = f_4x[3 * Li2_polydeg : Li2_polydeg];
	f = polyz_unpack_gamma1_217(f, y_packed[3 * y_packed_buflen_gamma1_217 : Li2_pack_zlen_gamma1_217]);
	f_4x[3 * Li2_polydeg : Li2_polydeg] = f;

	return f_4x;
}


inline
fn expandMask_poly_gamma1_219_4x(
	reg ptr u32[4 * Li2_polydeg] f_4x,
	reg ptr u8[64] rho_prime,
	stack u16 kappa)
	-> reg ptr u32[4 * Li2_polydeg]
{
	// TODO: change kappa type to u64
	// TODO: un-inline this function
	// TODO: Ethan wrote this function to always copy complete SHAKE256
	// blocks to the packed-y buffer.  However, we do not have to copy
	// the complete last block.  Fix this.
	reg ptr u32[Li2_polydeg] f;
	stack u8[4 * y_packed_buflen_gamma1_219] y_packed;
	stack u64 y_packed_filled;
	stack u64 output_squeeze_counter;
	stack u256[25] xof;	

	reg u64 addr v64;
	reg u64 i j;
	reg u8 c;

	inline int total_blocks;


	v64 = (64u) kappa;
	xof = expandMask_poly_xof_init(xof, rho_prime, v64);

	y_packed_filled = 0;
	output_squeeze_counter = 0;
	total_blocks = Li2_pack_zlen_gamma1_219 / SHAKE256_RATE + 1;
	while (output_squeeze_counter < total_blocks) {
		xof = _keccakf1600_4x_avx2(xof);

		?{}, i = #set0_64();
		while (i < SHAKE256_RATE) {
			?{}, j = #set0_64();
			while (j < 4) {
				addr = i;
				v64 = j;
				addr = expandMask_xof_addr(addr, v64);
				c = xof[u8 (int) addr];
				addr = y_packed_buflen_gamma1_219;
				addr *= j;
				addr += y_packed_filled;
				addr += i;
				y_packed[(int) addr] = c;
				j += 1;
			}
			i += 1;
		}
		y_packed_filled += SHAKE256_RATE;
		output_squeeze_counter += 1;
	}

	f = f_4x[0 * Li2_polydeg : Li2_polydeg];
	f = polyz_unpack_gamma1_219(f, y_packed[0 * y_packed_buflen_gamma1_219 : Li2_pack_zlen_gamma1_219]);
	f_4x[0 * Li2_polydeg : Li2_polydeg] = f;

	f = f_4x[1 * Li2_polydeg : Li2_polydeg];
	f = polyz_unpack_gamma1_219(f, y_packed[1 * y_packed_buflen_gamma1_219 : Li2_pack_zlen_gamma1_219]);
	f_4x[1 * Li2_polydeg : Li2_polydeg] = f;

	f = f_4x[2 * Li2_polydeg : Li2_polydeg];
	f = polyz_unpack_gamma1_219(f, y_packed[2 * y_packed_buflen_gamma1_219 : Li2_pack_zlen_gamma1_219]);
	f_4x[2 * Li2_polydeg : Li2_polydeg] = f;

	f = f_4x[3 * Li2_polydeg : Li2_polydeg];
	f = polyz_unpack_gamma1_219(f, y_packed[3 * y_packed_buflen_gamma1_219 : Li2_pack_zlen_gamma1_219]);
	f_4x[3 * Li2_polydeg : Li2_polydeg] = f;

	return f_4x;
}

inline
fn expandMask_poly_gamma1_219(reg ptr u32[Li2_polydeg] f, reg ptr u8[64] rho_prime, stack u16 kappa)
	-> reg ptr u32[Li2_polydeg]
{
	reg u64 i;
	reg u8 c;
	stack u64[25] state;
	stack u8[(Li2_pack_zlen_gamma1_219 / SHAKE256_RATE) * SHAKE256_RATE + SHAKE256_RATE] y_packed;
	stack u64 y_loc;
	stack u64 output_squeeze_counter;
	reg u64 addr;

	state = expandMask_poly_shake_init(state, rho_prime, kappa);

	y_loc = 0;
	output_squeeze_counter = 0;
	while(output_squeeze_counter < (Li2_pack_zlen_gamma1_219 / SHAKE256_RATE + 1)) {
		state = __keccakf1600_ref(state);

		i = 0;
		while(i < SHAKE256_RATE) {
			addr = i;
			c = state[u8 (int) addr];
			addr = y_loc;
			y_packed[(int) addr] = c;
			y_loc += 1;
			i += 1;
		}

		output_squeeze_counter += 1;
	}

	f = polyz_unpack_gamma1_219(f, y_packed[0 : Li2_pack_zlen_gamma1_219]);

	return f;
}
