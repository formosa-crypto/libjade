inline
fn poly_shiftl(reg ptr u32[Li2_polydeg] f) -> reg ptr u32[Li2_polydeg] {
    reg u64 i;
    reg u32 coeff;

    ?{}, i = #set0_64();
    while (i < Li2_polydeg) {
        coeff = f[(int) i];
        coeff <<= Li2_d;
        f[(int) i] = coeff;
        i += 1;
    }

    return f;
}

fn unpack_hints(reg ptr u8[Li2_omega + Li2_k] hints_buf, reg ptr u32[Li2_k * Li2_polydeg] hints)
    -> reg ptr u32[Li2_k * Li2_polydeg], reg u8 {
    // This function is not inline, because I have had experiences with the
    // register allocation failing (when it should be able to succeed) when
    // this function was inlined.

    reg u64 i j;
    reg u8 done fail status;
    reg bool tmp;
    reg u32 zero;
    reg u64 k hints_elem_offset idx idx1 idx2 idxtmp;
    reg u64 hints_cumpop; // cumulative popcount of hints

    // Unpack h
    ?{}, fail = #set0_8();
    ?{}, k = #set0_64();
    ?{}, i = #set0_64();
    while {
        tmp = i >= Li2_k;
        done = #SETcc(tmp);
        done |= fail;
    } (done == 0) {
        hints_elem_offset = i;
        hints_elem_offset <<= Li2_log2polydeg;
        ?{}, j = #set0_64();
        ?{}, zero = #set0_32();
        while (j < Li2_polydeg) {
            idx = #LEA_64(hints_elem_offset + j);
            hints[(int) idx] = zero;
            j += 1;
        }

        // if (sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA) { return 1; }
        hints_cumpop = (64u)hints_buf[(int) (Li2_omega + i)];
        if (hints_cumpop < k) {
            fail = 1;
        } else {
            if (hints_cumpop > Li2_omega) {
                fail = 1;
            } else {
                j = k;
                while {
                    tmp = j >= hints_cumpop;
                    done = #SETcc(tmp);
                    done = done | fail;
                } (done == 0) {
                    // Coefficients are ordered for strong unforgeability
                    // if(j > k && sig[j] <= sig[j-1]) return 1;
                    idx1 = (64u)hints_buf[(int) j];
                    if (j > k) {
                        idx2 = (64u)hints_buf[(int) j-1];
                        if (idx1 <= idx2) {
                            fail = 1;
                        }
                    }
                    if (fail == 0) {
                        // h->vec[i].coeffs[sig[j]] = 1;
                        idxtmp = #LEA_64(hints_elem_offset + idx1);
                        hints[(int) idxtmp] = 1;

                        j += 1;

                    }
                }
            }
        }
        // k = sig[OMEGA + i];
        k = hints_cumpop;
        i += 1;
    }

    // fail is `0` or `1`.  Map it to a `0` or `-1` status code.
    status = -fail;
    return hints, status;
}


inline
fn cmp_ctilde(stack u8[32] c_tilde1 c_tilde2) -> reg u8 {
    // TODO: Short circuit on failure

    reg u64 i;
    reg u8 b1 b2 result;

    ?{}, result = #set0_8();
    ?{}, i = #set0_64();
    while (i < 32) {
        b1 = c_tilde1[(int) i];
        b2 = c_tilde2[(int) i];
        if (b1 != b2) {
            result |= 0xFF;
        }
        i += 1;
    }
    return result;
}

inline
fn verify_inner(stack ptr u8[Li2_SIGN_LEN] sig, reg u64 m, reg u64 m_len, stack ptr u8[Li2_PK_LEN] pk) -> reg u32 {
    // TODO: Go through the code and check for all operators
    // whether they should be signed or unsigned.

    reg u32 r_status;
    stack u32 status;
    stack u8 z_normcheck_fail c_tilde_result;
    reg u64 i;
    reg u8 byte;
    reg u8 hints_popcount_fail;

    reg ptr u8[Li2_SIGN_LEN] sig_rsp;
    reg ptr u8[Li2_PK_LEN] pk_rsp;

    stack u64[25] keccak_state;
    reg ptr u64[25] keccak_state_rsp;
    stack u8[32] tr c_tilde c_tilde2;
    reg ptr u8[32] tr_rsp;
    stack u8[64] mu;

    stack u32[Li2_k * Li2_l * Li2_polydeg] fft_matA;
	stack u32[Li2_polydeg] challenge t1_elem ct1_elem;
    stack u32[Li2_l * Li2_polydeg] z;
    stack u32[Li2_k * Li2_polydeg] az w1 hints;

    stack u8[Li2_pack_w1len] w1_buf;
    reg ptr u32[Li2_polydeg] z_to_unpack az_elem w1_elem hints_elem;
    reg ptr u8[Li2_pack_zlen] z_buf;
    reg ptr u8[Li2_pack_t1len] t1_buf;
    reg ptr u8[Li2_omega + Li2_k] hints_buf;

    inline int ii;

    //status = 0xFF;
    r_status = -1;
    status = r_status;

    // Sample A
    fft_matA = expandA(pk[0:32]);

    // Compute mu
    keccak_state_rsp = keccak_state;
    keccak_state = st0(keccak_state_rsp);
    keccak_state = keccak_state_rsp;
    pk_rsp = pk;
    tr_rsp = tr;
    tr_rsp = shake256_of_pk(pk_rsp, tr_rsp);
    tr = tr_rsp;
    mu = hash_tr_m(tr, m_len, m);

    // Unpack z
    sig_rsp = sig;
    for ii = 0 to Li2_l {
		z_buf = sig_rsp[32 + ii * Li2_pack_zlen : Li2_pack_zlen];
		z_to_unpack = z[ii * Li2_polydeg : Li2_polydeg];
		z_to_unpack = polyz_unpack(z_to_unpack, z_buf);
        z[ii * Li2_polydeg : Li2_polydeg] = z_to_unpack;
	}
    z_normcheck_fail = checknorm_vecl(z, (int) (Li2_gamma1 - Li2_beta));
    if (z_normcheck_fail == 0) {
        z = fft_vec(z);

        sig_rsp = sig;
        hints_buf = sig_rsp[Li2_pack_hstart : Li2_omega + Li2_k];
        hints, hints_popcount_fail = unpack_hints(hints_buf, hints);
        if (hints_popcount_fail == 0) {

            // Compute A * z
            az = mult_mat_vec(fft_matA, z);

            // Sample challenge
            sig_rsp = sig;
            ?{}, i = #set0_64();
            while (i < 32) {
                byte = sig_rsp[(int) i];
                c_tilde[(int) i] = byte;
                i += 1;
            }
            challenge = sampleInBall(challenge, c_tilde);
            
            // Compute c*t1 and add to w1
            challenge = fft(challenge);
            
            for ii = 0 to Li2_k {
                pk_rsp = pk;
                t1_buf = pk_rsp[32 + ii * Li2_pack_t1len : Li2_pack_t1len];
                t1_elem = polyt1_unpack(t1_elem, t1_buf);
                t1_elem = poly_shiftl(t1_elem);
                t1_elem = fft(t1_elem);
                ct1_elem = pointwise_mont_mult(challenge, t1_elem, ct1_elem);
                az_elem = az[ii * Li2_polydeg : Li2_polydeg];
                w1_elem = w1[ii * Li2_polydeg : Li2_polydeg];
                w1_elem = poly_subtract(az_elem, ct1_elem, w1_elem);
                w1_elem = poly_reduce32(w1_elem);
                w1_elem = ifft_to_mont(w1_elem);
                w1_elem = poly_caddq(w1_elem);
                hints_elem = hints[ii * Li2_polydeg : Li2_polydeg];
                w1_elem = poly_use_hint(w1_elem, hints_elem);
                w1[ii * Li2_polydeg : Li2_polydeg] = w1_elem;
            }
            w1_buf = pack_w1(w1);
            c_tilde2 = hash_mu_w1(mu, w1_buf);
            c_tilde_result = cmp_ctilde(c_tilde, c_tilde2);
            if (c_tilde_result == 0) {
                status = 0;                
            }
        }
    }
    return status;
}

inline
fn verify(reg u64 ptr_sig, reg u64 ptr_m, reg u64 m_len, reg u64 ptr_pk) -> reg u32 {
    stack u8[Li2_PK_LEN] pk;
    reg ptr u8[Li2_PK_LEN] pk_rsp;
    stack u8[Li2_SIGN_LEN] sig;
    reg ptr u8[Li2_SIGN_LEN] sig_rsp;

    reg u8 byte;
    reg u64 i;
    reg u32 status;

    pk_rsp = pk;
    sig_rsp = sig;

    ?{}, i = #set0_64();
	while(i < Li2_PK_LEN) {
		byte = (u8)[ptr_pk + i];
		pk_rsp[(int) i] = byte;
		i += 1;
	}

    ?{}, i = #set0_64();
    while(i < Li2_SIGN_LEN) {
		byte = (u8)[ptr_sig + i];
		sig_rsp[(int) i] = byte;
		i += 1;
	}

    status = verify_inner(sig_rsp, ptr_m, m_len, pk_rsp);

    pk = pk_rsp;
    sig = sig_rsp;

    return status;
}
