from Jade require "crypto_stream/chacha/common/amd64/avx/chacha_globals.jinc"

u128 CHACHA_P0001_H_AVX = (4u32)[0,0,0,1];
u128 CHACHA_P0002_H_AVX = (4u32)[0,0,0,2];
u128 CHACHA_P4444_V_AVX = (4u32)[4,4,4,4];

// _h /////////////////////////////////////////////////////////////////////////

// nonce : 12 bytes
// key : 32 bytes
// counter : 4 bytes (starts at 0)
inline fn __init_h_avx(reg u64 nonce, reg u32 counter, reg u64 key) -> reg u128[4]
{
  reg u128[4] st;

  st[0] = CHACHA_SIGMA_H_AVX;

  st[1] = (u128)[key + 0];
  st[2] = (u128)[key + 16];

  st[3] = #set0_128();
  st[3] = #VPINSR_4u32(st[3], counter, 0);
  st[3] = #VPINSR_4u32(st[3], (u32)[nonce + 0], 1);
  st[3] = #VPINSR_2u64(st[3], (u64)[nonce + 4], 1);

  // st:
  //  st[0] = { sigma      }
  //  st[1] = { k[127:0]   }
  //  st[2] = { k[255:128] }
  //  st[3] = { n[96:0], 0 }
  return st;
}


// increments 32-bit counter
inline fn __increment_counter02_h_avx(reg u128[4] st) -> reg u128[4]
{
  st[3] +4u32 = CHACHA_P0002_H_AVX;
  return st;
}


// increments 32-bit counter
inline fn __increment_counter01_h_avx(reg u128[4] st) -> reg u128[4]
{
  st[3] +4u32 = CHACHA_P0001_H_AVX;
  return st;
}


// _v /////////////////////////////////////////////////////////////////////////

// nonce : 12 bytes
// key : 32 bytes
// counter : 4 bytes (starts at 0)
inline fn __init_v_avx(reg u64 nonce, reg u32 counter, reg u64 key) -> stack u128[16]
{
  inline int i;
  stack u128[16] _st;
  reg u128[16] st;
  stack u32 s_counter;

  s_counter = counter;

  // sigma
  for i=0 to 4
  { st[i] = CHACHA_SIGMA_V_AVX[i]; }

  // key
  for i=0 to 8
  { st[4+i] = #VPBROADCAST_4u32((u32)[key + 4*i]); }

  // counter
  st[12] = #VPBROADCAST_4u32(s_counter);
  st[12] +4u32= CHACHA_P3210_V_AVX;

  // nonce
  for i=0 to 3
  { st[13+i] = #VPBROADCAST_4u32((u32)[nonce + 4*i]); }

  _st = #copy_128(st);

  //  _st:
  //   _st[0]  = { ... , sigma0     , sigma0     }
  //   _st[1]  = { ... , sigma1     , sigma1     }
  //   _st[2]  = { ... , sigma2     , sigma2     }
  //   _st[3]  = { ... , sigma3     , sigma3     }
  //   _st[4]  = { ... , k[31:0]    , k[31:0]    }
  //   ...
  //   _st[11] = { ... , k[255:224] , k[255:224] }
  //   _st[12] = { ... , 1          , 0          }
  //   _st[13] = { ... , n[31:0]    , n[31:0]    }
  //   _st[14] = { ... , n[63:32]   , n[63:32]   }
  //   _st[15] = { ... , n[95:64]   , n[95:64]   }

  return _st;
}


inline fn __increment_counter_v_avx(stack u128[16] st) -> stack u128[16]
{
  reg u128 c;

  c = CHACHA_P4444_V_AVX;
  c +4u32= st[12];
  st[12] = c;
  return st;
}


