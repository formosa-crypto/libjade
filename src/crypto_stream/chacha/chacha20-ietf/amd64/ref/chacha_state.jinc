
// nonce : 12 bytes
// key : 32 bytes
// counter : 4 bytes (starts at 0)
inline fn __init_ref(reg u64 nonce, reg u32 counter, reg u64 key) -> stack u32[16]
{
  inline int i;
  stack u32[16] st;
  reg u32 t;

  st[0] = 0x61707865;
  st[1] = 0x3320646e;
  st[2] = 0x79622d32;
  st[3] = 0x6b206574;

  // reads 8 u32 from pointer key
  for i=0 to 8
  { t = (u32)[key + 4*i];
    st[4+i] = t; }

  // 32-bit counter
  st[12] = counter;

  // reads 3 u32 from pointer nonce
  for i=0 to 3
  { t = (u32)[nonce + 4*i];
    st[13+i] = t; }

  return st;
}

// increments 32-bit counter
inline fn __increment_counter_ref(stack u32[16] st) -> stack u32[16]
{
  reg u32 t;

  t = st[12];
  t += 1;
  st[12] = t;

  return st;
}
