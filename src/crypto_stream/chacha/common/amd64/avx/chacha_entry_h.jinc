inline fn __chacha_xor_h_avx(reg u64 output input len nonce key)
{
  reg u128[4] st k;
  reg u128 r16 r8;

  r16 = CHACHA_R16_AVX;
  r8  = CHACHA_R8_AVX;
  st = __init_h_avx(nonce, key);

  while(len >= 64)
  {
    k = __copy_state_h_avx(st);
    k = __rounds_h_avx(k, r16, r8);
    k = __sum_states_h_avx(k, st);
    output, input, len = __store_xor_h_avx(output, input, len, k);
    st = __increment_counter01_h_avx(st);
  }

  if(len > 0)
  { k = __copy_state_h_avx(st);
    k = __rounds_h_avx(k, r16, r8);
    k = __sum_states_h_avx(k, st);
    __store_xor_last_h_avx(output, input, len, k);
  }
}


inline fn __chacha_xor_h_x2_avx(reg u64 output input len nonce key)
{
  reg u128[4] st k1 k2;
  reg u128 r16 r8;

  r16 = CHACHA_R16_AVX;
  r8  = CHACHA_R8_AVX;
  st = __init_h_avx(nonce, key);

  while(len >= 128)
  {
    k1, k2 = __copy_state_h_x2_avx(st);
    k1, k2 = __rounds_h_x2_avx(k1, k2, r16, r8);
    k1, k2 = __sum_states_h_x2_avx(k1, k2, st);
    output, input, len = __store_xor_h_x2_avx(output, input, len, k1, k2);
    st = __increment_counter02_h_avx(st);
  }

  if(len > 64)
  { k1, k2 = __copy_state_h_x2_avx(st);
    k1, k2 = __rounds_h_x2_avx(k1, k2, r16, r8);
    k1, k2 = __sum_states_h_x2_avx(k1, k2, st);
    output, input, len = __store_xor_h_avx(output, input, len, k1);
    __store_xor_last_h_avx(output, input, len, k2);
  }
  else
  { k1 = __copy_state_h_avx(st);
    k1 = __rounds_h_avx(k1, r16, r8);
    k1 = __sum_states_h_avx(k1, st);
    __store_xor_last_h_avx(output, input, len, k1);
  }
}


//


inline fn __chacha_h_avx(reg u64 output len nonce key)
{
  reg u128[4] st k;
  reg u128 r16 r8;

  r16 = CHACHA_R16_AVX;
  r8  = CHACHA_R8_AVX;
  st = __init_h_avx(nonce, key);

  while(len >= 64)
  {
    k = __copy_state_h_avx(st);
    k = __rounds_h_avx(k, r16, r8);
    k = __sum_states_h_avx(k, st);
    output, len = __store_h_avx(output, len, k);
    st = __increment_counter01_h_avx(st);
  }

  if(len > 0)
  { k = __copy_state_h_avx(st);
    k = __rounds_h_avx(k, r16, r8);
    k = __sum_states_h_avx(k, st);
    __store_last_h_avx(output, len, k);
  }
}


inline fn __chacha_h_x2_avx(reg u64 output len nonce key)
{
  reg u128[4] st k1 k2;
  reg u128 r16 r8;

  r16 = CHACHA_R16_AVX;
  r8  = CHACHA_R8_AVX;
  st = __init_h_avx(nonce, key);

  while(len >= 128)
  {
    k1, k2 = __copy_state_h_x2_avx(st);
    k1, k2 = __rounds_h_x2_avx(k1, k2, r16, r8);
    k1, k2 = __sum_states_h_x2_avx(k1, k2, st);
    output, len = __store_h_x2_avx(output, len, k1, k2);
    st = __increment_counter02_h_avx(st);
  }

  if(len > 64)
  { k1, k2 = __copy_state_h_x2_avx(st);
    k1, k2 = __rounds_h_x2_avx(k1, k2, r16, r8);
    k1, k2 = __sum_states_h_x2_avx(k1, k2, st);
    output, len = __store_h_avx(output, len, k1);
    __store_last_h_avx(output, len, k2);
  }
  else
  { k1 = __copy_state_h_avx(st);
    k1 = __rounds_h_avx(k1, r16, r8);
    k1 = __sum_states_h_avx(k1, st);
    __store_last_h_avx(output, len, k1);
  }
}


