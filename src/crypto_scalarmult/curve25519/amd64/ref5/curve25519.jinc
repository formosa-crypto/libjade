from Jade require "crypto_scalarmult/curve25519/amd64/common/bit.jinc"
from Jade require "crypto_scalarmult/curve25519/amd64/common/decode_scalar.jinc"

from Jade require "crypto_scalarmult/curve25519/amd64/common/51/decode_u5.jinc"
from Jade require "crypto_scalarmult/curve25519/amd64/common/51/init_points5.jinc"
from Jade require "crypto_scalarmult/curve25519/amd64/common/51/add5.jinc"
from Jade require "crypto_scalarmult/curve25519/amd64/common/51/sub5.jinc"
from Jade require "crypto_scalarmult/curve25519/amd64/common/51/cswap5.jinc"
from Jade require "crypto_scalarmult/curve25519/amd64/common/51/tobytes5.jinc"

require "mul5.jinc"
require "sqr5.jinc"
require "invert5.jinc"

inline fn __add_and_double5(
  stack u64[5] init,
  stack u64[5] x2,
  reg   u64[5] z2r,
  stack u64[5] x3,
  stack u64[5] z3)
  ->
  stack u64[5],
  reg   u64[5],
  stack u64[5],
  stack u64[5]
{
  stack u64[5] z2 t0 t1 t2;

  t0  = __sub5_ssr(x2, z2r);
  x2  = __add5_ssr(x2, z2r);

  t1  = __sub5_sss(x3, z3);
  z2  = __add5_sss(x3, z3);

  z3  = __mul5_sss(x2, t1);
  z2  = __mul5_sss(z2, t0);

  t2  = __sqr5_ss(x2);
  t1  = __sqr5_ss(t0);

  x3  = __add5_sss(z3, z2);
  z2  = __sub5_sss(z3, z2);

  x2  = __mul5_sss(t2, t1);
  t0  = __sub5_sss(t2, t1);

  z2  = __sqr5_ss(z2);
  t2  = __mul5_a24_add_sss(t0, t2, 996679680); // 121665 * 2^13
  x3  = __sqr5_ss(x3);
  z3  = __mul5_sss(init, z2);
  z2r = __mul5_rss(t0, t2);

  return x2, z2r, x3, z3;
}

inline fn __montgomery_ladder_step5(
  stack u8[32] k,
  stack u64[5] init,
  stack u64[5] x2,
  reg   u64[5] z2r,
  stack u64[5] x3,
  stack u64[5] z3,
  stack u64    swapped,
  reg   u64    ctr)
  ->
  stack u64[5],
  reg   u64[5],
  stack u64[5],
  stack u64[5],
  stack u64
{
  reg u64 toswap bit;

  bit = __ith_bit(k, ctr);

  toswap  = swapped;
  toswap ^= bit;

  x2, z2r, x3, z3 = __cswap5(x2, z2r, x3, z3, toswap);
  swapped = bit;

  x2, z2r, x3, z3 = __add_and_double5(init, x2, z2r, x3, z3);

  return x2, z2r, x3, z3, swapped;
}


inline fn __montgomery_ladder5(
  reg u64[5] u,
  stack u8[32] k)
  ->
  stack u64[5],
  reg u64[5]
{
  stack u64[5] us x2 x3 z3;
  reg u64[5] z2r;
  stack u64 swapped;
  #spill_to_mmx reg u64 ctr;

  (x2,z2r,x3,z3) = __init_points5(u); 
  us = #copy(u);

  ctr = 255;
  swapped = 0;

  while
  {
    ctr -= 1;
    () = #spill(ctr);

    (x2, z2r, x3, z3, swapped) = 
      __montgomery_ladder_step5(k, us, x2, z2r, x3, z3, swapped, ctr);

    () = #unspill(ctr);
  } (ctr > 0)

  return x2, z2r;
}

inline fn __encode_point5(stack u64[5] x2, reg u64[5] z2r) -> reg u64[4]
{
  stack u64[5] z2;
  reg u64[5] r1;
  reg u64[4] r2;

  z2 = #copy(z2r);
  z2 = __invert5(z2);
  r1 = __mul5_rss(x2, z2);
  r2 = __tobytes5(r1);

  return r2;
}

inline fn __curve25519_internal_ref5(stack u8[32] k, reg u64[5] u) -> reg u64[4]
{
  stack u64[5] x2;
  reg u64[5] z2r;
  reg u64[4] r;

  (x2,z2r) = __montgomery_ladder5(u, k);
  r = __encode_point5(x2,z2r);

  return r;
}

inline fn __curve25519_ref5(reg u64[4] _k _u) -> reg u64[4]
{
  stack u8[32] k;
  reg u64[5] u;
  reg u64[4] r;

  k = __decode_scalar(_k);
  u = __decode_u_coordinate5(_u);
  r = __curve25519_internal_ref5(k, u);

  return r;
}

inline fn __curve25519_ref5_base(reg u64[4] _k) -> reg u64[4]
{
  stack u8[32] k;
  reg u64[5] u;
  reg u64[4] r;

  k = __decode_scalar(_k);
  u = __decode_u_coordinate_base5();
  r = __curve25519_internal_ref5(k, u);

  return r;
}

