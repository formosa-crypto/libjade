// code originally from amd64-51 qhasm implementation
// - and adapted from https://github.com/tfaoliveira/qhasm-translator/blob/master/test-cases/crypto_scalarmult/curve25519/amd64-51/fe25519_mul.mil

inline fn __mul5_rss(stack u64[5] xa ya) -> reg u64[5]
{
  reg bool cf;
  reg u64 mulr01 mulr11 mulr21 mulr31 mulr41;
  reg u64 mulrax mulrdx;
  reg u64 mulredmask;
  reg u64 mult;
  stack u64 mulx319_stack mulx419_stack;
  reg u64[5] r;

  mulrax = xa[3];
  mulrax *= 19;
  mulx319_stack = mulrax;
  mulrdx, mulrax = mulrax * ya[2];
  r[0] = mulrax;
  mulr01 = mulrdx;
  mulrax = xa[4];
  mulrax *= 19;
  mulx419_stack = mulrax;
  mulrdx, mulrax = mulrax * ya[1];
  cf, r[0] += mulrax;
  _, mulr01 += mulrdx + cf;
  mulrax = xa[0];
  mulrdx, mulrax = mulrax * ya[0];
  cf, r[0] += mulrax;
  _, mulr01 += mulrdx + cf;
  mulrax = xa[0];
  mulrdx, mulrax = mulrax * ya[1];
  r[1] = mulrax;
  mulr11 = mulrdx;
  mulrax = xa[0];
  mulrdx, mulrax = mulrax * ya[2];
  r[2] = mulrax;
  mulr21 = mulrdx;
  mulrax = xa[0];
  mulrdx, mulrax = mulrax * ya[3];
  r[3] = mulrax;
  mulr31 = mulrdx;
  mulrax = xa[0];
  mulrdx, mulrax = mulrax * ya[4];
  r[4] = mulrax;
  mulr41 = mulrdx;
  mulrax = xa[1];
  mulrdx, mulrax = mulrax * ya[0];
  cf, r[1] += mulrax;
  _, mulr11 += mulrdx + cf;
  mulrax = xa[1];
  mulrdx, mulrax = mulrax * ya[1];
  cf, r[2] += mulrax;
  _, mulr21 += mulrdx + cf;
  mulrax = xa[1];
  mulrdx, mulrax = mulrax * ya[2];
  cf, r[3] += mulrax;
  _, mulr31 += mulrdx + cf;
  mulrax = xa[1];
  mulrdx, mulrax = mulrax * ya[3];
  cf, r[4] += mulrax;
  _, mulr41 += mulrdx + cf;
  mulrax = xa[1];
  mulrax *= 19;
  mulrdx, mulrax = mulrax * ya[4];
  cf, r[0] += mulrax;
  _, mulr01 += mulrdx + cf;
  mulrax = xa[2];
  mulrdx, mulrax = mulrax * ya[0];
  cf, r[2] += mulrax;
  _, mulr21 += mulrdx + cf;
  mulrax = xa[2];
  mulrdx, mulrax = mulrax * ya[1];
  cf, r[3] += mulrax;
  _, mulr31 += mulrdx + cf;
  mulrax = xa[2];
  mulrdx, mulrax = mulrax * ya[2];
  cf, r[4] += mulrax;
  _, mulr41 += mulrdx + cf;
  mulrax = xa[2];
  mulrax *= 19;
  mulrdx, mulrax = mulrax * ya[3];
  cf, r[0] += mulrax;
  _, mulr01 += mulrdx + cf;
  mulrax = xa[2];
  mulrax *= 19;
  mulrdx, mulrax = mulrax * ya[4];
  cf, r[1] += mulrax;
  _, mulr11 += mulrdx + cf;
  mulrax = xa[3];
  mulrdx, mulrax = mulrax * ya[0];
  cf, r[3] += mulrax;
  _, mulr31 += mulrdx + cf;
  mulrax = xa[3];
  mulrdx, mulrax = mulrax * ya[1];
  cf, r[4] += mulrax;
  _, mulr41 += mulrdx + cf;
  mulrax = mulx319_stack;
  mulrdx, mulrax = mulrax * ya[3];
  cf, r[1] += mulrax;
  _, mulr11 += mulrdx + cf;
  mulrax = mulx319_stack;
  mulrdx, mulrax = mulrax * ya[4];
  cf, r[2] += mulrax;
  _, mulr21 += mulrdx + cf;
  mulrax = xa[4];
  mulrdx, mulrax = mulrax * ya[0];
  cf, r[4] += mulrax;
  _, mulr41 += mulrdx + cf;
  mulrax = mulx419_stack;
  mulrdx, mulrax = mulrax * ya[2];
  cf, r[1] += mulrax;
  _, mulr11 += mulrdx + cf;
  mulrax = mulx419_stack;
  mulrdx, mulrax = mulrax * ya[3];
  cf, r[2] += mulrax;
  _, mulr21 += mulrdx + cf;
  mulrax = mulx419_stack;
  mulrdx, mulrax = mulrax * ya[4];
  cf, r[3] += mulrax;
  _, mulr31 += mulrdx + cf;
  mulredmask = 0x7FFFFFFFFFFFF;
  mulr01 <<= 13;
  mulrax = r[0];
  mulrax >>= 51;
  mulr01 |= mulrax;
  r[0] &= mulredmask;
  mulr11 <<= 13;
  mulrax = r[1];
  mulrax >>= 51;
  mulr11 |= mulrax;
  r[1] &= mulredmask;
  r[1] += mulr01;
  mulr21 <<= 13;
  mulrax = r[2];
  mulrax >>= 51;
  mulr21 |= mulrax;
  r[2] &= mulredmask;
  r[2] += mulr11;
  mulr31 <<= 13;
  mulrax = r[3];
  mulrax >>= 51;
  mulr31 |= mulrax;
  r[3] &= mulredmask;
  r[3] += mulr21;
  mulr41 <<= 13;
  mulrax = r[4];
  mulrax >>= 51;
  mulr41 |= mulrax;
  r[4] &= mulredmask;
  r[4] += mulr31;
  mulr41 = mulr41 * 19;
  r[0] += mulr41;
  mult = r[0];
  mult >>= 51;
  mult += r[1];
  r[1] = mult;
  mult >>= 51;
  r[0] &= mulredmask;
  mult += r[2];
  r[2] = mult;
  mult >>= 51;
  r[1] &= mulredmask;
  mult += r[3];
  r[3] = mult;
  mult >>= 51;
  r[2] &= mulredmask;
  mult += r[4];
  r[4] = mult;
  mult >>= 51;
  r[3] &= mulredmask;
  mult *= 19;
  r[0] += mult;
  r[4] &= mulredmask;

	return r;
}

inline fn __mul5_sss(stack u64[5] xa ya) -> stack u64[5]
{
  stack u64[5] rs;
  reg u64[5] r;

  r = __mul5_rss(xa, ya);
  rs = #copy(r);

  return rs;
}

// ////////////////////////////////////////////////////////////////////////////

#[returnaddress="stack"]
fn _mul5_pp(reg ptr u64[5] xa ya) -> reg ptr u64[5]
{
  inline int i;
  reg bool cf;
  reg u64 mulr01 mulr11 mulr21 mulr31 mulr41;
  reg u64 mulrax mulrdx;
  reg u64 mulredmask;
  reg u64 mult;
  stack u64 mulx319_stack mulx419_stack;
  reg u64[5] r;

  mulrax = xa[3];
  mulrax *= 19;
  mulx319_stack = mulrax;
  mulrdx, mulrax = mulrax * ya[2];
  r[0] = mulrax;
  mulr01 = mulrdx;
  mulrax = xa[4];
  mulrax *= 19;
  mulx419_stack = mulrax;
  mulrdx, mulrax = mulrax * ya[1];
  cf, r[0] += mulrax;
  _, mulr01 += mulrdx + cf;
  mulrax = xa[0];
  mulrdx, mulrax = mulrax * ya[0];
  cf, r[0] += mulrax;
  _, mulr01 += mulrdx + cf;
  mulrax = xa[0];
  mulrdx, mulrax = mulrax * ya[1];
  r[1] = mulrax;
  mulr11 = mulrdx;
  mulrax = xa[0];
  mulrdx, mulrax = mulrax * ya[2];
  r[2] = mulrax;
  mulr21 = mulrdx;
  mulrax = xa[0];
  mulrdx, mulrax = mulrax * ya[3];
  r[3] = mulrax;
  mulr31 = mulrdx;
  mulrax = xa[0];
  mulrdx, mulrax = mulrax * ya[4];
  r[4] = mulrax;
  mulr41 = mulrdx;
  mulrax = xa[1];
  mulrdx, mulrax = mulrax * ya[0];
  cf, r[1] += mulrax;
  _, mulr11 += mulrdx + cf;
  mulrax = xa[1];
  mulrdx, mulrax = mulrax * ya[1];
  cf, r[2] += mulrax;
  _, mulr21 += mulrdx + cf;
  mulrax = xa[1];
  mulrdx, mulrax = mulrax * ya[2];
  cf, r[3] += mulrax;
  _, mulr31 += mulrdx + cf;
  mulrax = xa[1];
  mulrdx, mulrax = mulrax * ya[3];
  cf, r[4] += mulrax;
  _, mulr41 += mulrdx + cf;
  mulrax = xa[1];
  mulrax *= 19;
  mulrdx, mulrax = mulrax * ya[4];
  cf, r[0] += mulrax;
  _, mulr01 += mulrdx + cf;
  mulrax = xa[2];
  mulrdx, mulrax = mulrax * ya[0];
  cf, r[2] += mulrax;
  _, mulr21 += mulrdx + cf;
  mulrax = xa[2];
  mulrdx, mulrax = mulrax * ya[1];
  cf, r[3] += mulrax;
  _, mulr31 += mulrdx + cf;
  mulrax = xa[2];
  mulrdx, mulrax = mulrax * ya[2];
  cf, r[4] += mulrax;
  _, mulr41 += mulrdx + cf;
  mulrax = xa[2];
  mulrax *= 19;
  mulrdx, mulrax = mulrax * ya[3];
  cf, r[0] += mulrax;
  _, mulr01 += mulrdx + cf;
  mulrax = xa[2];
  mulrax *= 19;
  mulrdx, mulrax = mulrax * ya[4];
  cf, r[1] += mulrax;
  _, mulr11 += mulrdx + cf;
  mulrax = xa[3];
  mulrdx, mulrax = mulrax * ya[0];
  cf, r[3] += mulrax;
  _, mulr31 += mulrdx + cf;
  mulrax = xa[3];
  mulrdx, mulrax = mulrax * ya[1];
  cf, r[4] += mulrax;
  _, mulr41 += mulrdx + cf;
  mulrax = mulx319_stack;
  mulrdx, mulrax = mulrax * ya[3];
  cf, r[1] += mulrax;
  _, mulr11 += mulrdx + cf;
  mulrax = mulx319_stack;
  mulrdx, mulrax = mulrax * ya[4];
  cf, r[2] += mulrax;
  _, mulr21 += mulrdx + cf;
  mulrax = xa[4];
  mulrdx, mulrax = mulrax * ya[0];
  cf, r[4] += mulrax;
  _, mulr41 += mulrdx + cf;
  mulrax = mulx419_stack;
  mulrdx, mulrax = mulrax * ya[2];
  cf, r[1] += mulrax;
  _, mulr11 += mulrdx + cf;
  mulrax = mulx419_stack;
  mulrdx, mulrax = mulrax * ya[3];
  cf, r[2] += mulrax;
  _, mulr21 += mulrdx + cf;
  mulrax = mulx419_stack;
  mulrdx, mulrax = mulrax * ya[4];
  cf, r[3] += mulrax;
  _, mulr31 += mulrdx + cf;
  mulredmask = 0x7FFFFFFFFFFFF;
  mulr01 <<= 13;
  mulrax = r[0];
  mulrax >>= 51;
  mulr01 |= mulrax;
  r[0] &= mulredmask;
  mulr11 <<= 13;
  mulrax = r[1];
  mulrax >>= 51;
  mulr11 |= mulrax;
  r[1] &= mulredmask;
  r[1] += mulr01;
  mulr21 <<= 13;
  mulrax = r[2];
  mulrax >>= 51;
  mulr21 |= mulrax;
  r[2] &= mulredmask;
  r[2] += mulr11;
  mulr31 <<= 13;
  mulrax = r[3];
  mulrax >>= 51;
  mulr31 |= mulrax;
  r[3] &= mulredmask;
  r[3] += mulr21;
  mulr41 <<= 13;
  mulrax = r[4];
  mulrax >>= 51;
  mulr41 |= mulrax;
  r[4] &= mulredmask;
  r[4] += mulr31;
  mulr41 = mulr41 * 19;
  r[0] += mulr41;
  mult = r[0];
  mult >>= 51;
  mult += r[1];
  r[1] = mult;
  mult >>= 51;
  r[0] &= mulredmask;
  mult += r[2];
  r[2] = mult;
  mult >>= 51;
  r[1] &= mulredmask;
  mult += r[3];
  r[3] = mult;
  mult >>= 51;
  r[2] &= mulredmask;
  mult += r[4];
  r[4] = mult;
  mult >>= 51;
  r[3] &= mulredmask;
  mult *= 19;
  r[0] += mult;
  r[4] &= mulredmask;

  for i=0 to 5
  { xa[i] = r[i]; }

	return xa;
}

inline fn _mul5_ss_(stack u64[5] xa ya) -> stack u64[5]
{
  reg ptr u64[5] xp yp;

  xp = xa;
  yp = ya;
  xp = _mul5_pp(xp, yp);

  xa = xp;
  return xa;
}

// ////////////////////////////////////////////////////////////////////////////

inline fn __mul5_a24_add_rss(stack u64[5] xa ya, inline u64 _a24) -> reg u64[5]
{
  reg u64 a24;
  reg u64 mul121666rax mul121666rdx;
  reg u64[5] r;
  
  a24 = _a24;

  // xa[0] * a24 
  mul121666rax = xa[0];
  mul121666rdx, mul121666rax = mul121666rax * a24;
  mul121666rax >>= 13;
  r[0] = mul121666rax;
  r[1] = mul121666rdx;
  
  // xa[1] * a24
  mul121666rax = xa[1];
  mul121666rdx, mul121666rax = mul121666rax * a24;
  mul121666rax >>= 13;
  r[1] += mul121666rax;
  r[2] = mul121666rdx;
  
  // xa[2] * a24
  mul121666rax = xa[2];
  mul121666rdx, mul121666rax = mul121666rax * a24;
  mul121666rax >>= 13;
  r[2] += mul121666rax;
  r[3] = mul121666rdx;
  
  // xa[3] * a24
  mul121666rax = xa[3];
  mul121666rdx, mul121666rax = mul121666rax * a24;
  mul121666rax >>= 13;
  r[3] += mul121666rax;
  r[4] = mul121666rdx;
  
  // xa[4] * a24
  mul121666rax = xa[4];
  mul121666rdx, mul121666rax = mul121666rax * a24;
  mul121666rax >>= 13;
  r[4] += mul121666rax;
  mul121666rdx *= 19;
  
  r[0] += mul121666rdx;
  
  r[0] += ya[0];
  r[1] += ya[1];
  r[2] += ya[2];
  r[3] += ya[3];
  r[4] += ya[4];
  
  return r;
}

inline fn __mul5_a24_add_sss(stack u64[5] xa ya, inline u64 a24) -> stack u64[5]
{
  stack u64[5] rs;
  reg u64[5] r;

  r = __mul5_a24_add_rss(xa, ya, a24);
  rs = #copy(r);

  return rs;
}

