from Jade require "crypto_scalarmult/curve25519/amd64/common/bit.jinc"
from Jade require "crypto_scalarmult/curve25519/amd64/common/decode_scalar.jinc"
from Jade require "crypto_scalarmult/curve25519/amd64/common/load_store4.jinc"

from Jade require "crypto_scalarmult/curve25519/amd64/common/64/decode_u4.jinc"
from Jade require "crypto_scalarmult/curve25519/amd64/common/64/init_points4.jinc"
from Jade require "crypto_scalarmult/curve25519/amd64/common/64/add4.jinc"
from Jade require "crypto_scalarmult/curve25519/amd64/common/64/sub4.jinc"
from Jade require "crypto_scalarmult/curve25519/amd64/common/64/cswap4.jinc"
from Jade require "crypto_scalarmult/curve25519/amd64/common/64/tobytes4.jinc"

require "mul4.jinc"
require "sqr4.jinc"
require "invert4.jinc"

inline fn __add_and_double4(
  stack u64[4] init,
  stack u64[4] x2,
  reg   u64[4] z2r,
  stack u64[4] x3,
  stack u64[4] z3)
  ->
  stack u64[4],
  reg   u64[4],
  stack u64[4],
  stack u64[4]
{
  stack u64[4] z2 t0 t1 t2;

  t0  = __sub4_ssr(x2, z2r);
  x2  = __add4_ssr(x2, z2r);

  t1  = __sub4_sss(x3, z3);
  z2  = __add4_sss(x3, z3);

  z3  = __mul4_sss(x2, t1);
  z2  = __mul4_sss(z2, t0);

  t2  = __sqr4_ss(x2);
  t1  = __sqr4_ss(t0);

  x3  = __add4_sss(z3, z2);
  z2  = __sub4_sss(z3, z2);

  x2  = __mul4_sss(t2, t1);
  t0  = __sub4_sss(t2, t1);

  z2  = __sqr4_ss(z2);
  z3  = __mul4_a24_ss(t0, 121665);
  x3  = __sqr4_ss(x3);

  t2  = __add4_sss(t2, z3);
  z3  = __mul4_sss(init, z2);
  z2r = __mul4_rss(t0, t2);

  return x2, z2r, x3, z3;
}

inline fn __montgomery_ladder_step4(
  stack u8[32] k,
  stack u64[4] init,
  stack u64[4] x2,
  reg   u64[4] z2r,
  stack u64[4] x3,
  stack u64[4] z3,
  stack u64    swapped,
  reg   u64    ctr)
  ->
  stack u64[4],
  reg   u64[4],
  stack u64[4],
  stack u64[4],
  stack u64
{
  reg u64 toswap bit;

  bit = __ith_bit(k, ctr);

  toswap  = swapped;
  toswap ^= bit;

  x2, z2r, x3, z3 = __cswap4(x2, z2r, x3, z3, toswap);
  swapped = bit;

  x2, z2r, x3, z3 = __add_and_double4(init, x2, z2r, x3, z3);

  return x2, z2r, x3, z3, swapped;
}


inline fn __montgomery_ladder4(
  reg u64[4] u,
  stack u8[32] k)
  ->
  stack u64[4],
  reg u64[4]
{
  stack u64[4] us x2 x3 z3;
  reg u64[4] z2r;
  stack u64 swapped;
  #spill_to_mmx reg u64 ctr;

  (x2,z2r,x3,z3) = __init_points4(u); 
  us = #copy(u);

  ctr = 255;
  swapped = 0;

  while
  {
    ctr -= 1;
    () = #spill(ctr);

    (x2, z2r, x3, z3, swapped) = 
      __montgomery_ladder_step4(k, us, x2, z2r, x3, z3, swapped, ctr);

    () = #unspill(ctr);
  } (ctr > 0)

  return x2, z2r;
}

inline fn __encode_point4(stack u64[4] x2, reg u64[4] z2r) -> reg u64[4]
{
  stack u64[4] z2;
  reg u64[4] r;

  z2 = #copy(z2r);
  z2 = __invert4(z2);
  r = __mul4_rss(x2, z2);
  r = __tobytes4(r);

  return r;
}

inline fn __curve25519_internal_ref4(stack u8[32] k, reg u64[4] u) -> reg u64[4]
{
  stack u64[4] x2;
  reg u64[4] z2r r;

  (x2,z2r) = __montgomery_ladder4(u, k);
  r = __encode_point4(x2,z2r);

  return r;
}

fn _curve25519_ref4(reg u64[4] _k _u) -> reg u64[4]
{
  stack u8[32] k;
  reg u64[4] u r;

  k = __decode_scalar(_k);
  u = __decode_u_coordinate4(_u);
  r = __curve25519_internal_ref4(k, u);

  return r;
}

inline fn __curve25519_ref4_ptr(#spill_to_mmx reg u64 rp, reg u64 kp up)
{
  reg u64[4] r k u;

  ()  = #spill(rp);

  k = __load4(kp);
  u = __load4(up);
  r = _curve25519_ref4(k, u);

  ()  = #unspill(rp);

  __store4(rp, r);
}


fn _curve25519_ref4_base(reg u64[4] _k) -> reg u64[4]
{
  stack u8[32] k;
  reg u64[4] u r;

  k = __decode_scalar(_k);
  u = __decode_u_coordinate_base4();
  r = __curve25519_internal_ref4(k, u);

  return r;
}

inline fn __curve25519_ref4_base_ptr(#spill_to_mmx reg u64 rp, reg u64 kp)
{
  reg u64[4] r k;

  () = #spill(rp);

  k = __load4(kp);
  r = _curve25519_ref4_base(k);

  ()  = #unspill(rp);

  __store4(rp, r);
}

