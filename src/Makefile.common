
# --------------------------------------------------------------------
TOP   = $(abspath $(dir $(filter %Makefile.common,$(MAKEFILE_LIST)))../)
SRC   = $(TOP)/src/
TEST  = $(TOP)/test/
PROOF = $(TOP)/proof/

CDIR  = $(abspath $(dir $(abspath $(firstword $(MAKEFILE_LIST)))))
RDIR  = $(subst $(SRC),,$(CDIR))
TDIR  = $(TEST)bin/$(RDIR)
PDIR  = $(PROOF)$(RDIR)

# OPERATION: crypto_kem, crypto_hash, ..., common; OP is a shorthand for OPERATION
OPERATION = $(word 1, $(subst /, ,$(RDIR)))
OP        = $(word 2, $(subst _, , $(OPERATION)_))
NAMESPACE = $(subst crypto_,jade_, $(subst -,_,$(subst /,_,$(RDIR))))

# --------------------------------------------------------------------

include $(SRC)/Makefile.functions

# --------------------------------------------------------------------
CI_DIR =
CIT =
ifeq ($(CI),1)
CI_DIR := .ci
CIT = 2> $(CI_DIR)/$(@F).log && rm -f $(CI_DIR)/$(@F).error || \
     (echo $$? > $(CI_DIR)/$(@F).error && \
      cat $(CI_DIR)/$(@F).log >> $(CI_DIR)/$(@F).error && \
      rm $(CI_DIR)/$(@F).log && \
      exit 127)
endif

# --------------------------------------------------------------------
JEXT    ?= jazz
override JFLAGS += -noinsertarraycopy
JINCLUDE = -I Jade:$(SRC)
JASMIN  ?= jasminc
JAZZCT  ?= jazzct
JASMINC := $(JASMIN) $(JFLAGS) $(JINCLUDE)
COMPILE  = ($(JASMINC) -o $@ $<) $(CIT)

# --------------------------------------------------------------------
include $(SRC)/$(OPERATION)/EcFlags.mk

EC_DIR     := $(PDIR)
ECFLAGS    = $(subst namespace,$(NAMESPACE),$(ECFN)) -oec $(notdir $@)
EXTRACT_S  = (cd $(EC_DIR) && $(JASMINC) $(ECFLAGS) $(CDIR)/$<) $(CIT)
EXTRACT_CT = (cd $(EC_DIR) && $(JASMINC) -CT $(ECFLAGS) $(CDIR)/$<) $(CIT)

# --------------------------------------------------------------------
CHECKS_DIR := checks

# --------------------------------------------------------------------
DEPS_DIR := .deps
DEPS = ((printf "$@: "; printf "$< "; $(JASMINC) -print-dependencies $<) > $(DEPS_DIR)/$(@F).d) $(CIT)
DEPFILES :=

# --------------------------------------------------------------------
compile: $(SRCS:%.$(JEXT)=%.s)
	@true

# --------------------------------------------------------------------
# Note: by using a single-file extraction, only one Jasmin file can be processed (the first from SRCS)

extract: $(EC_DIR)/extracted_s.ec $(EC_DIR)/extracted_ct.ec
	@true

$(EC_DIR)/extracted_s.ec : $(SRCS) $(DEPS_DIR)/extracted_s.ec.d | $(DEPS_DIR) $(EC_DIR) $(CI_DIR)
	$(DEPS)
	$(EXTRACT_S)

$(EC_DIR)/extracted_ct.ec : $(SRCS) $(DEPS_DIR)/extracted_ct.ec.d | $(DEPS_DIR) $(EC_DIR) $(CI_DIR)
	$(DEPS)
	$(EXTRACT_CT)

# --------------------------------------------------------------------

extract0: extract_s extract_ct
	@true

extract_s: $(SRCS:%.$(JEXT)=$(EC_DIR)/%_s.ec)
	@true

extract_ct: $(SRCS:%.$(JEXT)=$(EC_DIR)/%_ct.ec)
	@true

%.s : %.$(JEXT) $(DEPS_DIR)/%.s.d | $(DEPS_DIR) $(CI_DIR)
	$(DEPS)
	$(COMPILE)

$(EC_DIR)/%_s.ec : %.$(JEXT) $(DEPS_DIR)/%_s.ec.d | $(DEPS_DIR) $(EC_DIR) $(CI_DIR)
	$(DEPS)
	$(EXTRACT_S)

$(EC_DIR)/%_ct.ec : %.$(JEXT) $(DEPS_DIR)/%_ct.ec.d | $(DEPS_DIR) $(EC_DIR) $(CI_DIR)
	$(DEPS)
	$(EXTRACT_CT)

# --------------------------------------------------------------------

include $(SRC)/Makefile.checksafety

# --------------------------------------------------------------------

include $(SRC)/Makefile.checksct

# --------------------------------------------------------------------
$(CHECKSDIR): ; @mkdir -p $@
$(DEPS_DIR): ; @mkdir -p $@
$(EC_DIR): ; @mkdir -p $@; touch $@/.gitkeep
ifeq ($(CI),1)
$(CI_DIR): ; @mkdir -p $@
endif

DEPFILES := \
 $(DEPFILES) \
 $(SRCS:%.$(JEXT)=$(DEPS_DIR)/%.s.d) \
 $(SRCS:%.$(JEXT)=$(DEPS_DIR)/%_s.ec.d) \
 $(SRCS:%.$(JEXT)=$(DEPS_DIR)/%_ct.ec.d) \
 $(DEPS_DIR)/extracted_s.ec.d \
 $(DEPS_DIR)/extracted_ct.ec.d

$(DEPFILES):

include $(wildcard $(DEPFILES))

# --------------------------------------------------------------------
.PHONY: .jflags
.jflags:
	@echo -n "$(JFLAGS)" > .jflags

# --------------------------------------------------------------------
.PHONY: clean

clean:
	@rm -fr $(DEPS_DIR) $(CHECKS_DIR) $(SAFETY_DIR) *.s *.safety* *.sct* *.o *.a .jflags *.out
ifeq ($(CI),1)
	@rm -fr $(CI_DIR)
endif

