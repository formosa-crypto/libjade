
from Jade require "crypto_stream/xsalsa20/amd64/ref/xsalsa20.jinc"
from Jade require "crypto_onetimeauth/poly1305/amd64/ref/poly1305.jinc"

require "xsalsa20_32D.jinc"
require "poly1305_kD.jinc"

inline fn __xsalsa20poly1305_ref(reg u64 c m mlen nonce key) -> reg u64
{
  reg u64 r tag ct skey;
  stack u64 c_s mlen_s;

  if(mlen >= 32)
  { c_s = c;
    mlen_s = mlen;

    __xsalsa20_xor_ref(c, m, mlen, nonce, key);

    c    = c_s;
    mlen = mlen_s;
    tag  = #LEA(c + 16);
    ct   = #LEA(c + 32);
    mlen = #LEA(mlen - 32);
    skey = c;

    __poly1305_ref(tag, ct, mlen, skey);

    c = c_s;
    (u64)[c + 0] = 0;
    (u64)[c + 8] = 0;
    r = 0;
  }
  else
  { r = -1; }

  return r;
} 


inline fn __xsalsa20poly1305_ref_open(reg u64 m c clen nonce key) -> reg u64
{
  reg u64 r tag ct;
  stack u8[32] subkey;
  reg ptr u8[32] subkey_p;
  stack u64 m_s c_s clen_s nonce_s key_s;

  if(clen >= 32)
  { m_s = m;
    c_s = c;
    clen_s = clen;
    nonce_s = nonce;
    key_s = key;

    subkey_p = subkey;
    subkey_p = __xsalsa20_ref_32(subkey_p, nonce, key);

    c    = c_s;
    clen = clen_s;
    tag  = #LEA(c + 16);
    ct   = #LEA(c + 32);
    clen = #LEA(clen - 32);

    r = __poly1305_verify_ref_k(tag, ct, clen, subkey_p);
    // We declassify the result of tag verification, as the function returns it anyway.
    // This is a hack due to the annotation getting lost if put directly on the inline function.
    #declassify r = r;

    if(r == 0)
    { m = m_s;
      c = c_s;
      clen = clen_s;
      nonce = nonce_s;
      key = key_s;

      __xsalsa20_xor_ref(m, c, clen, nonce, key);

      m = m_s;
      (u64)[m + 0]  = 0;
      (u64)[m + 8]  = 0;
      (u64)[m + 16] = 0;
      (u64)[m + 24] = 0;
      r = 0; // this frees 'r' for the xsalsa20_xor_ref f. call
    }
    else
    { r = -1; }
  }
  else
  { r = -1; }

  return r;
}

