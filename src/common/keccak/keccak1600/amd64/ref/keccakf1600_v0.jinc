from Jade require "common/doit.jinc" //__ROL64

u64[24] KECCAK_RC =
{  0x0000000000000001
  ,0x0000000000008082
  ,0x800000000000808a
  ,0x8000000080008000
  ,0x000000000000808b
  ,0x0000000080000001
  ,0x8000000080008081
  ,0x8000000000008009
  ,0x000000000000008a
  ,0x0000000000000088
  ,0x0000000080008009
  ,0x000000008000000a
  ,0x000000008000808b
  ,0x800000000000008b
  ,0x8000000000008089
  ,0x8000000000008003
  ,0x8000000000008002
  ,0x8000000000000080
  ,0x000000000000800a
  ,0x800000008000000a
  ,0x8000000080008081
  ,0x8000000000008080
  ,0x0000000080000001
  ,0x8000000080008008
};

inline fn __index(inline int x y) -> inline int
{
  inline int r;
  r = (x % 5) + 5 * (y % 5);
  return r;
}

inline fn __keccak_rho_offsets(inline int i) -> inline int
{
  inline int r x y z t;

  r = 0;
  x = 1;
  y = 0;

  for t = 0 to 24 {
    if (i == x + 5 * y) {
      r = ((t + 1) * (t + 2) / 2) % 64;
    }
    z = (2 * x + 3 * y) % 5;
    x = y;
    y = z;
  }

  return r;
}

inline fn __rhotates(inline int x y) -> inline int
{
  inline int i r;
  i = __index(x, y);
  r = __keccak_rho_offsets(i);
  return r;
}

inline fn __theta_sum_ref(stack u64[25] a) -> reg u64[5]
{
  inline int i j;
  reg u64[5] c;

  for i=0 to 5
  { c[i] = a[(5*(( 0) % 5) + (( i) % 5))]; }

  for j=1 to 5
  { for i=0 to 5
    { c[i] ^= a[(5*(( j) % 5) + (( i) % 5))]; }
  }

  return c;
}

inline fn __theta_rol_ref(reg u64[5] c) -> reg u64[5]
{
  inline int i;
  reg u64[5] d;
  reg u64 t r;

  for i = 0 to 5
  { d[i] = c[(i+1)%5];
    d[i] = __ROL64(d[i], 1);
    d[i] ^= c[(i+4)%5];
  }

  return d;
}

inline fn __rol_sum_ref(
  reg u64[5] d,
  stack u64[25] a,
  inline int offset
) -> reg u64[5]
{
  inline int j j1 k;
  reg u64[5] c;
  reg u64 t;

  for j = 0 to 5
  {
    j1 = (j+offset) % 5;
    k = __rhotates(j1, j);
    t = a[(5*((j) % 5) + ((j1) % 5))];
    t ^= d[j1];
    t = __ROL64(t, k);
    c[j] = t;
  }

  return c;
}

inline fn __set_row_ref(
  stack u64[25] r,
  inline int row,
  reg u64[5] c,
  reg u64 iota
) -> stack u64[25]
{
  inline int j j1 j2;
  reg u64 t;

  for j= 0 to 5
  {
    j1 = (j+1) % 5;
    j2 = (j+2) % 5;
    t = !c[j1] & c[j2];
    if row==0 && j==0 { t ^= iota; }
    t ^= c[j];
    r[(5*(( row) % 5) + (( j) % 5))] = t;
  }

  return r;
}

inline fn __round2x_ref(stack u64[25] a r, reg u64 iota) -> stack u64[25], stack u64[25]
{
  reg u64[5] c d;

  c = __theta_sum_ref(a);
  d = __theta_rol_ref(c);
  c = __rol_sum_ref(d, a, 0);
  r = __set_row_ref(r, 0, c, iota);
  c = __rol_sum_ref(d, a, 3);
  r = __set_row_ref(r, 1, c, iota);
  c = __rol_sum_ref(d, a, 1);
  r = __set_row_ref(r, 2, c, iota);
  c = __rol_sum_ref(d, a, 4);
  r = __set_row_ref(r, 3, c, iota);
  c = __rol_sum_ref(d, a, 2);
  r = __set_row_ref(r, 4, c, iota);

  return a, r;
}

inline fn __get_iota_ref(reg ptr u64[25] sp, reg u64 round) -> stack u64
{
  reg ptr u64[25] p;
  stack u64 sv;
  reg u64 v;

  p = sp;
  v = p[(int)round];
  sv = v;

  return sv;
}

inline fn __keccakf1600_ref(stack u64[25] a) -> stack u64[25]
{
  stack u64[25] r;
  reg ptr u64[24] iotas_p;
  reg u64 iota round;

  iotas_p = KECCAK_RC;
  round = 0;

  while(round < 24)
  {
    iota = iotas_p[(int) round];
    a, r = __round2x_ref(a, r, iota);
    round += 1;

    iota = iotas_p[(int) round];
    r, a = __round2x_ref(r, a, iota);
    round += 1;
  }

  return a;
}



