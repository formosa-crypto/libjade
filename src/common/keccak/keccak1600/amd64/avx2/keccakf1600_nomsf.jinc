
u256[24] KECCAK_IOTAS =
{  (4u64)[0x0000000000000001, 0x0000000000000001, 0x0000000000000001, 0x0000000000000001]
  ,(4u64)[0x0000000000008082, 0x0000000000008082, 0x0000000000008082, 0x0000000000008082]
  ,(4u64)[0x800000000000808a, 0x800000000000808a, 0x800000000000808a, 0x800000000000808a]
  ,(4u64)[0x8000000080008000, 0x8000000080008000, 0x8000000080008000, 0x8000000080008000]
  ,(4u64)[0x000000000000808b, 0x000000000000808b, 0x000000000000808b, 0x000000000000808b]
  ,(4u64)[0x0000000080000001, 0x0000000080000001, 0x0000000080000001, 0x0000000080000001]
  ,(4u64)[0x8000000080008081, 0x8000000080008081, 0x8000000080008081, 0x8000000080008081]
  ,(4u64)[0x8000000000008009, 0x8000000000008009, 0x8000000000008009, 0x8000000000008009]
  ,(4u64)[0x000000000000008a, 0x000000000000008a, 0x000000000000008a, 0x000000000000008a]
  ,(4u64)[0x0000000000000088, 0x0000000000000088, 0x0000000000000088, 0x0000000000000088]
  ,(4u64)[0x0000000080008009, 0x0000000080008009, 0x0000000080008009, 0x0000000080008009]
  ,(4u64)[0x000000008000000a, 0x000000008000000a, 0x000000008000000a, 0x000000008000000a]
  ,(4u64)[0x000000008000808b, 0x000000008000808b, 0x000000008000808b, 0x000000008000808b]
  ,(4u64)[0x800000000000008b, 0x800000000000008b, 0x800000000000008b, 0x800000000000008b]
  ,(4u64)[0x8000000000008089, 0x8000000000008089, 0x8000000000008089, 0x8000000000008089]
  ,(4u64)[0x8000000000008003, 0x8000000000008003, 0x8000000000008003, 0x8000000000008003]
  ,(4u64)[0x8000000000008002, 0x8000000000008002, 0x8000000000008002, 0x8000000000008002]
  ,(4u64)[0x8000000000000080, 0x8000000000000080, 0x8000000000000080, 0x8000000000000080]
  ,(4u64)[0x000000000000800a, 0x000000000000800a, 0x000000000000800a, 0x000000000000800a]
  ,(4u64)[0x800000008000000a, 0x800000008000000a, 0x800000008000000a, 0x800000008000000a]
  ,(4u64)[0x8000000080008081, 0x8000000080008081, 0x8000000080008081, 0x8000000080008081]
  ,(4u64)[0x8000000000008080, 0x8000000000008080, 0x8000000000008080, 0x8000000000008080]
  ,(4u64)[0x0000000080000001, 0x0000000080000001, 0x0000000080000001, 0x0000000080000001]
  ,(4u64)[0x8000000080008008, 0x8000000080008008, 0x8000000080008008, 0x8000000080008008]
};


u256[6] KECCAK_RHOTATES_LEFT = 
{
  (4u64)[41, 36, 18,  3],
  (4u64)[27, 28, 62,  1],
  (4u64)[39, 56,  6, 45],
  (4u64)[ 8, 55, 61, 10],
  (4u64)[20, 25, 15,  2],
  (4u64)[14, 21, 43, 44]
};


u256[6] KECCAK_RHOTATES_RIGHT =
{
  (4u64)[64-41, 64-36, 64-18, 64- 3],
  (4u64)[64-27, 64-28, 64-62, 64- 1],
  (4u64)[64-39, 64-56, 64- 6, 64-45],
  (4u64)[64- 8, 64-55, 64-61, 64-10],
  (4u64)[64-20, 64-25, 64-15, 64- 2],
  (4u64)[64-14, 64-21, 64-43, 64-44]
};


u64[25] KECCAK_A_JAGGED = 
{
   0,  4,  5,  6,  7,
  10, 24, 13, 18, 23,
   8, 16, 25, 22, 15,
  11, 12, 21, 26, 19,
   9, 20, 17, 14, 27
};


inline fn __keccakf1600_avx2(reg u256[7] state) -> reg u256[7]
{
  reg u256[9] t;
  reg u256 c00 c14 d00 d14;

  reg bool zf;
  reg u64 r iotas_o;

  reg ptr u256[24] iotas_p;
  reg ptr u256[6] rhotates_left_p;
  reg ptr u256[6] rhotates_right_p;

  iotas_p = KECCAK_IOTAS;
  iotas_o = 0;
  rhotates_left_p = KECCAK_RHOTATES_LEFT;
  rhotates_right_p = KECCAK_RHOTATES_RIGHT;

  r = KECCAK_ROUNDS;
  while
  {
	  //######################################## Theta
	  c00 = #VPSHUFD_256(state[2], (4u2)[1,0,3,2]);
	  c14 = state[5] ^ state[3];
	  t[2] = state[4] ^ state[6];
	  c14 = c14 ^ state[1];
	  c14 = c14 ^ t[2];
	  t[4] = #VPERMQ(c14, (4u2)[2,1,0,3]);
	  c00 = c00 ^ state[2];
	  t[0] = #VPERMQ(c00, (4u2)[1,0,3,2]);
	  t[1] = c14 >>4u64 63;
	  t[2] = c14 +4u64 c14;
	  t[1] = t[1] | t[2];
	  d14 = #VPERMQ(t[1], (4u2)[0,3,2,1]);
	  d00 = t[1] ^ t[4];
	  d00 = #VPERMQ(d00, (4u2)[0,0,0,0]);
	  c00 = c00 ^ state[0];
	  c00 = c00 ^ t[0];
	  t[0] = c00 >>4u64 63;
	  t[1] = c00 +4u64 c00;
	  t[1] = t[1] | t[0];
	  state[2] = state[2] ^ d00;
	  state[0] = state[0] ^ d00;
	  d14 = #VPBLEND_8u32(d14, t[1], (8u1)[1,1,0,0,0,0,0,0]);
	  t[4] = #VPBLEND_8u32(t[4], c00, (8u1)[0,0,0,0,0,0,1,1]);
	  d14 = d14 ^ t[4];

	  //######################################## Rho + Pi + pre-Chi shuffle
    t[3] = #VPSLLV_4u64(state[2], rhotates_left_p[0] );
	  state[2] = #VPSRLV_4u64(state[2], rhotates_right_p[0] );
	  state[2] = state[2] | t[3];
	  state[3] = state[3] ^ d14;
	  t[4] = #VPSLLV_4u64(state[3], rhotates_left_p[2] );
	  state[3] = #VPSRLV_4u64(state[3], rhotates_right_p[2] );
	  state[3] = state[3] | t[4];
	  state[4] = state[4] ^ d14;
	  t[5] = #VPSLLV_4u64(state[4], rhotates_left_p[3] );
	  state[4] = #VPSRLV_4u64(state[4], rhotates_right_p[3] );
	  state[4] = state[4] | t[5];
	  state[5] = state[5] ^ d14;
	  t[6] = #VPSLLV_4u64(state[5], rhotates_left_p[4] );
	  state[5] = #VPSRLV_4u64(state[5], rhotates_right_p[4] );
	  state[5] = state[5] | t[6];
	  state[6] = state[6] ^ d14;
	  t[3] = #VPERMQ(state[2], (4u2)[2,0,3,1]);
	  t[4] = #VPERMQ(state[3], (4u2)[2,0,3,1]);
	  t[7] = #VPSLLV_4u64(state[6], rhotates_left_p[5] );
	  t[1] = #VPSRLV_4u64(state[6], rhotates_right_p[5] );
	  t[1] = t[1] | t[7];
	  state[1] = state[1] ^ d14;
	  t[5] = #VPERMQ(state[4], (4u2)[0,1,2,3]);
	  t[6] = #VPERMQ(state[5], (4u2)[1,3,0,2]);
	  t[8] = #VPSLLV_4u64(state[1], rhotates_left_p[1] );
	  t[2] = #VPSRLV_4u64(state[1], rhotates_right_p[1] );
	  t[2] = t[2] | t[8];

	  //######################################## Chi
	  t[7] = #VPSRLDQ_256(t[1], 8);
	  t[0] = !t[1] & t[7];
	  state[3] = #VPBLEND_8u32(t[2], t[6], (8u1)[0,0,0,0,1,1,0,0]);
	  t[8] = #VPBLEND_8u32(t[4], t[2], (8u1)[0,0,0,0,1,1,0,0]);
	  state[5] = #VPBLEND_8u32(t[3], t[4], (8u1)[0,0,0,0,1,1,0,0]);
	  t[7] = #VPBLEND_8u32(t[2], t[3], (8u1)[0,0,0,0,1,1,0,0]);
	  state[3] = #VPBLEND_8u32(state[3], t[4], (8u1)[0,0,1,1,0,0,0,0]);
	  t[8] = #VPBLEND_8u32(t[8], t[5], (8u1)[0,0,1,1,0,0,0,0]);
	  state[5] = #VPBLEND_8u32(state[5], t[2], (8u1)[0,0,1,1,0,0,0,0]);
	  t[7] = #VPBLEND_8u32(t[7], t[6], (8u1)[0,0,1,1,0,0,0,0]);
	  state[3] = #VPBLEND_8u32(state[3], t[5], (8u1)[1,1,0,0,0,0,0,0]);
	  t[8] = #VPBLEND_8u32(t[8], t[6], (8u1)[1,1,0,0,0,0,0,0]);
	  state[5] = #VPBLEND_8u32(state[5], t[6], (8u1)[1,1,0,0,0,0,0,0]);
	  t[7] = #VPBLEND_8u32(t[7], t[4], (8u1)[1,1,0,0,0,0,0,0]);
	  state[3] = !state[3] & t[8];
	  state[5] = !state[5] & t[7];
	  state[6] = #VPBLEND_8u32(t[5], t[2], (8u1)[0,0,0,0,1,1,0,0]);
	  t[8] = #VPBLEND_8u32(t[3], t[5], (8u1)[0,0,0,0,1,1,0,0]);
	  state[3] = state[3] ^ t[3];
	  state[6] = #VPBLEND_8u32(state[6], t[3], (8u1)[0,0,1,1,0,0,0,0]);
	  t[8] = #VPBLEND_8u32(t[8], t[4], (8u1)[0,0,1,1,0,0,0,0]);
	  state[5] = state[5] ^ t[5];
	  state[6] = #VPBLEND_8u32(state[6], t[4], (8u1)[1,1,0,0,0,0,0,0]);
	  t[8] = #VPBLEND_8u32(t[8], t[2], (8u1)[1,1,0,0,0,0,0,0]);
	  state[6] = !state[6] & t[8];
	  state[6] = state[6] ^ t[6];
	  state[4] = #VPERMQ(t[1], (4u2)[0,1,3,2]);
	  t[8] = #VPBLEND_8u32(state[4], state[0], (8u1)[0,0,1,1,0,0,0,0]);
	  state[1] = #VPERMQ(t[1], (4u2)[0,3,2,1]);
	  state[1] = #VPBLEND_8u32(state[1], state[0], (8u1)[1,1,0,0,0,0,0,0]);
	  state[1] = !state[1] & t[8];
	  state[2] = #VPBLEND_8u32(t[4], t[5], (8u1)[0,0,0,0,1,1,0,0]);
	  t[7] = #VPBLEND_8u32(t[6], t[4], (8u1)[0,0,0,0,1,1,0,0]);
	  state[2] = #VPBLEND_8u32(state[2], t[6], (8u1)[0,0,1,1,0,0,0,0]);
	  t[7] = #VPBLEND_8u32(t[7], t[3], (8u1)[0,0,1,1,0,0,0,0]);
	  state[2] = #VPBLEND_8u32(state[2], t[3], (8u1)[1,1,0,0,0,0,0,0]);
	  t[7] = #VPBLEND_8u32(t[7], t[5], (8u1)[1,1,0,0,0,0,0,0]);
	  state[2] = !state[2] & t[7];
	  state[2] = state[2] ^ t[2];
	  t[0] = #VPERMQ(t[0], (4u2)[0,0,0,0]);
	  state[3] = #VPERMQ(state[3], (4u2)[0,1,2,3]);
	  state[5] = #VPERMQ(state[5], (4u2)[2,0,3,1]);
	  state[6] = #VPERMQ(state[6], (4u2)[1,3,0,2]);
	  state[4] = #VPBLEND_8u32(t[6], t[3], (8u1)[0,0,0,0,1,1,0,0]);
	  t[7] = #VPBLEND_8u32(t[5], t[6], (8u1)[0,0,0,0,1,1,0,0]);
	  state[4] = #VPBLEND_8u32(state[4], t[5], (8u1)[0,0,1,1,0,0,0,0]);
	  t[7] = #VPBLEND_8u32(t[7], t[2], (8u1)[0,0,1,1,0,0,0,0]);
	  state[4] = #VPBLEND_8u32(state[4], t[2], (8u1)[1,1,0,0,0,0,0,0]);
	  t[7] = #VPBLEND_8u32(t[7], t[3], (8u1)[1,1,0,0,0,0,0,0]);
	  state[4] = !state[4] & t[7];
	  state[0] = state[0] ^ t[0];
	  state[1] = state[1] ^ t[1];
	  state[4] = state[4] ^ t[4];

	  //######################################## Iota
	  state[0] = state[0] ^ iotas_p.[(int) iotas_o];
    iotas_o += 32;

    _,_,_,zf,r = #DEC_64(r);
  }(!zf)

  return state;
}


