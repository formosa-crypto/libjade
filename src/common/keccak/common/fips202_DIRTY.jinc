param int KECCAK_ROUNDS=24;

from Jade require "common/keccak/keccak1600/amd64/avx2/keccak1600.jinc"
from Jade require "common/keccak/keccak1600/amd64/avx2/keccakf1600.jinc"
require "fips202_params.jinc"

#[returnaddress="stack"]
fn _sha3_256(reg ptr u8[32] out, reg u64 in inlen) -> reg ptr u8[32]
{
  reg u256[7] state;
  stack u64[28] s_state;
  reg ptr u64[25] a_jagged_p;
  reg u64 t l;
  reg u8 trail_byte;
  inline int i;

  state = __keccak_init_avx2();

  trail_byte = 0x06;
  t = SHA3_256_RATE;
  state = __absorb_avx2(state, in, inlen, trail_byte, t);

  state = __keccakf1600_avx2(state);

  for i=0 to 7 { s_state[u256 i] = state[i]; }
  
  a_jagged_p = KECCAK_A_JAGGED;

  for i=0 to 4
  {
    l = a_jagged_p[i];
    t = s_state[(int) l];
    out[u64 i] = t;
  }

  return out;
}


#[returnaddress="stack"]
fn _sha3_256_32(reg ptr u8[32] out, reg ptr u8[KYBER_SYMBYTES] in) -> reg ptr u8[32]
{
  reg u256[7] state;
  stack u64[28] s_state;
  stack u64[25] a_jagged_p;
  reg u64 t l;
  inline int i;

  a_jagged_p = KECCAK_A_JAGGED;
  s_state = __init_s_state_avx2();

  state[0] = #VPBROADCAST_4u64(in[u64 0]);

  for i=1 to KYBER_SYMBYTES/8
  {
    t = in[u64 i];
    l = a_jagged_p[i];
    s_state[(int) l] = t;
  }

  l = a_jagged_p[KYBER_SYMBYTES/8];
  l <<= 3;
  s_state[u8 (int)l] = 0x06;

  l = a_jagged_p[(SHA3_256_RATE-1)/8];
  l <<= 3;
  t = SHA3_256_RATE - 1; t &= 0x7;
  l += t;
  s_state[u8 (int)l] ^= 0x80;

  for i=1 to 7 { state[i] = s_state[u256 i]; }
  
  state = __keccakf1600_avx2(state);

  for i=0 to 7 { s_state[u256 i] = state[i]; }

  for i=0 to 4
  {
    l = a_jagged_p[i];
    t = s_state[(int)l];
    out[u64 i] = t;
  }

  return out;
}

#[returnaddress="stack"]
fn _sha3_256_134(reg ptr u8[32] out, reg ptr u8[134] in) -> reg ptr u8[32]
{
  reg u256[7] state;
  stack u64[28] s_state;
  stack u64[25] a_jagged_p;
  reg u64 t l;
  reg u8 c;
  inline int i;

  a_jagged_p = KECCAK_A_JAGGED;
  s_state = __init_s_state_avx2();

  state[0] = #VPBROADCAST_4u64(in[u64 0]);

  for i=1 to 16
  {
    t = in[u64 i];
    l = a_jagged_p[i];
    s_state[(int) l] = t;
  }

  c = in[u8 128];
  l = a_jagged_p[(int) 16];
  l <<= 3;
  s_state[u8 (int)l] = c;

  for i = 129 to 134{
    c = in[i];
    l += 1;
    s_state[u8 (int)l] = c;
  }

  l += 1;
  s_state[u8 (int)l] = 0x06;

  l = a_jagged_p[(SHA3_256_RATE-1)/8];
  l <<= 3;
  t = SHA3_256_RATE - 1; t &= 0x7;
  l += t;
  s_state[u8 (int)l] ^= 0x80;

  for i=1 to 7 { state[i] = s_state[u256 i]; }
  
  state = __keccakf1600_avx2(state);

  for i=0 to 7 { s_state[u256 i] = state[i]; }

  for i=0 to 4
  {
    l = a_jagged_p[i];
    t = s_state[(int)l];
    out[u64 i] = t;
  }

  return out;
}

#[returnaddress="stack"]
fn _shake256_64(reg u64 out outlen, reg const ptr u8[64] in)
{
  reg u256[7] state;
  stack u64[28] s_state;
  stack u64[25] a_jagged_p;
  reg u64 t l;
  inline int i;

  a_jagged_p = KECCAK_A_JAGGED;
  s_state = __init_s_state_avx2();

  state[0] = #VPBROADCAST_4u64(in[u64 0]);
  
  for i=1 to 8
  {
    l = a_jagged_p[i];
    t = in[u64 i];
    s_state[(int)l] = t;
  }

  l = a_jagged_p[8];
  l <<= 3;

  s_state[u8 (int)l] = 0x1f;

  l = a_jagged_p[(SHAKE256_RATE-1)/8];
  l <<= 3;
  t = SHAKE256_RATE - 1; t &= 0x7;
  l += t;
  s_state[u8 (int)l] ^= 0x80;

  for i=1 to 7
  { state[i] = s_state[u256 i]; }
  
  t = SHAKE256_RATE;
  __squeeze_avx2(state, out, outlen, t);
}


#[returnaddress="stack"]
fn _shake256_128_33(reg ptr u8[128] out, reg const ptr u8[33] in) -> stack u8[128]
{
  reg u256[7] state;
  stack u64[28] s_state;
  stack u64[25] a_jagged_p;
  reg u64 t l;
  reg u8 c;
  inline int i;

  a_jagged_p = KECCAK_A_JAGGED;
  s_state = __init_s_state_avx2();

  state[0] = #VPBROADCAST_4u64(in[u64 0]);

  for i = 1 to 4
  {
    t = in[u64 i];
    l = a_jagged_p[i];
    s_state[(int)l] = t;
  }

  c = in[u8 32];
  l = a_jagged_p[4];
  l <<= 3;
  s_state[u8 (int)l] = c;
  
  l += 1;
  s_state[u8 (int)l] = 0x1f;

  l = a_jagged_p[(SHAKE256_RATE-1)/8];
  l <<= 3;
  t = SHAKE256_RATE - 1; t &= 0x7;
  l += t;
  s_state[u8 (int)l] ^= 0x80;

  for i=1 to 7
  { state[i] = s_state[u256 i]; }

  state = __keccakf1600_avx2(state);

  for i=0 to 7
  { s_state[u256 i] = state[i]; }

  for i = 0 to 16
  {
    l = a_jagged_p[i];
    t = s_state[(int)l];
    out[u64 i] = t;
  }

  return out;
}

#[returnaddress="stack"]
fn _sha3_512_64(reg ptr u8[64] out, reg const ptr u8[64] in) -> stack u8[64]
{
  reg u256[7] state;
  stack u64[28] s_state;
  stack u64[25] a_jagged_p;
  reg u64 t l;
  inline int i;

  a_jagged_p = KECCAK_A_JAGGED;
  s_state = __init_s_state_avx2();

  state[0] = #VPBROADCAST_4u64(in[u64 0]);
  
  for i = 1 to 8
  {
    t = in[u64 i];
    l = a_jagged_p[i];
    s_state[(int)l] = t;
  }

  l = a_jagged_p[8];
  l <<= 3;
  s_state[u8 (int)l] = 0x06;

  l = a_jagged_p[(SHA3_512_RATE-1)/8];
  l <<= 3;
  t = SHA3_512_RATE - 1; t &= 0x7;
  l += t;
  s_state[u8 (int)l] ^= 0x80;

  for i=1 to 7
  { state[i] = s_state[u256 i]; }
  
  state = __keccakf1600_avx2(state);

  for i=0 to 7
  { s_state[u256 i] = state[i]; }

  for i = 0 to 8
  {
    l = a_jagged_p[i];
    t = s_state[(int) l];
    out[u64 i] = t;
  }

  return out;
}

#[returnaddress="stack"]
fn _sha3_512_32(reg ptr u8[64] out, reg const ptr u8[32] in) -> stack u8[64]
{
  reg u256[7] state;
  stack u64[28] s_state;
  stack u64[25] a_jagged_p;
  reg u64 t l;
  inline int i;

  a_jagged_p = KECCAK_A_JAGGED;
  s_state = __init_s_state_avx2();

  state[0] = #VPBROADCAST_4u64(in[u64 0]);
  
  for i = 1 to 4
  {
    t = in[u64 i];
    l = a_jagged_p[i];
    s_state[(int)l] = t;
  }

  l = a_jagged_p[4];
  l <<= 3;
  s_state[u8 (int)l] = 0x06;

  l = a_jagged_p[(SHA3_512_RATE-1)/8];
  l <<= 3;
  t = SHA3_512_RATE - 1; t &= 0x7;
  l += t;
  s_state[u8 (int)l] ^= 0x80;

  for i=1 to 7
  { state[i] = s_state[u256 i]; }
  
  state = __keccakf1600_avx2(state);

  for i=0 to 7
  { s_state[u256 i] = state[i]; }

  for i = 0 to 8
  {
    l = a_jagged_p[i];
    t = s_state[(int) l];
    out[u64 i] = t;
  }

  return out;
}

//FIXME: remove inline when register arrays are supported in "real" functions
inline
fn __shake128_absorb34(reg u256[7] state, reg const ptr u8[34] in) -> reg u256[7]
{
  reg u128 t128;
  stack u64[28] s_state;
  stack u64[25] a_jagged_p;
  reg u64 l t;
  reg u8 t8;
  inline int i;

  a_jagged_p = KECCAK_A_JAGGED;
  s_state = __init_s_state_avx2();
  
  state[0] = #VPBROADCAST_4u64(in[u64 0]);

  for i=1 to 4
  {
    t = in[u64 i];
    l = a_jagged_p[i];
    s_state[(int)l] = t;
  }

  t8 = in[32];
  l = a_jagged_p[(int) 4];
  l <<= 3;
  s_state[u8 (int)l] = t8;

  t8 = in[33];
  l += 1;
  s_state[u8 (int)l] = t8;

  l += 1;
  s_state[u8 (int)l] = 0x1f;

  l = a_jagged_p[(SHAKE128_RATE-1)/8];
  l <<= 3;
  t = SHAKE128_RATE - 1; t &= 0x7;
  l += t;
  s_state[u8 (int)l] = 0x80;

  for i=1 to 7 { state[i] = s_state[u256 i]; }
  
  return state;
}

inline
fn __shake128_squeezeblock(reg u256[7] state, reg ptr u8[SHAKE128_RATE] out) -> reg u256[7], reg ptr u8[SHAKE128_RATE]
{
  stack u64[28] s_state;
  stack u64[25] a_jagged_p;
  reg u64 t l;
  inline int i;

  state = __keccakf1600_avx2(state);

  for i=0 to 7
  { s_state[u256 i] = state[i]; }

  a_jagged_p = KECCAK_A_JAGGED;

  for i = 0 to SHAKE128_RATE/8
  {
    l = a_jagged_p[i];
    t = s_state[(int) l];
    out[u64 i] = t;
  }

  return state, out;
}
