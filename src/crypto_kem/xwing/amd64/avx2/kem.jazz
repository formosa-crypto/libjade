require "params.jinc"
require "kem.jinc"
from Jade require "common/tofromstack.jinc"

export fn jade_kem_xwing_amd64_avx2_keypair_derand(reg u64 public_key secret_key coins) -> reg u64
{
    reg u64 r;
    stack u8[96] stack_coins;
    reg ptr u8[96] stack_coins_p;

    public_key = public_key;
    secret_key = secret_key;

    stack_coins_p = stack_coins;
    stack_coins_p = __tostack96u8(stack_coins_p, coins);

    _crypto_xkem_keypair_derand_jazz(public_key, secret_key, stack_coins_p);

    ?{}, r = #set0();
    return r;
}


export fn jade_kem_xwing_amd64_avx2_keypair(reg u64 public_key secret_key) -> reg u64
{
  reg u64 r;
  stack u8[96] stack_coins;

  public_key = public_key;
  secret_key = secret_key;
  stack_coins = #randombytes(stack_coins);
  _crypto_xkem_keypair_derand_jazz(public_key, secret_key, stack_coins);
  ?{}, r = #set0();
  return r;
}

export fn jade_kem_xwing_amd64_avx2_enc_derand(reg u64 ciphertext shared_secret public_key coins) -> reg u64
{
  reg u64 r;
  stack u8[64] stack_coins;
  
  ciphertext = ciphertext;
  shared_secret = shared_secret;
  public_key = public_key;
  stack_coins = __tostack64u8(stack_coins, coins);
  _crypto_xkem_enc_derand_jazz(ciphertext, shared_secret, public_key, stack_coins);
  ?{}, r = #set0();
  return r;
}

export fn jade_kem_xwing_amd64_avx2_enc(reg u64 ciphertext shared_secret public_key) -> reg u64
{
  reg u64 r;
  stack u8[64] stack_coins;

  ciphertext = ciphertext;
  shared_secret = shared_secret;
  public_key = public_key;
  stack_coins = #randombytes(stack_coins);
  _crypto_xkem_enc_derand_jazz(ciphertext, shared_secret, public_key, stack_coins);
  ?{}, r = #set0();
  return r;
}

export fn jade_kem_xwing_amd64_avx2_dec(reg u64 shared_secret ciphertext secret_key) -> reg u64
{
  reg u64 r;
  __crypto_xkem_dec_jazz(shared_secret, ciphertext, secret_key);
  ?{}, r = #set0();
  return r;
}

