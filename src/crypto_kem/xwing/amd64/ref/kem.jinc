from Jade require "crypto_kem/kyber/kyber768/amd64/ref/kem.jinc"
from Jade require "common/keccak/common/fips202_ref_DIRTY.jinc"
from Jade require "common/tofromstack.jinc"
require "params.jinc"
require "scalarmult.jinc"

#[returnaddress="stack"]
fn _crypto_xkem_keypair_derand_jazz(reg u64 pkp, reg u64 skp, reg ptr u8[3*XWING_SYMBYTES] randomnessp)
{
    stack u64 stackSecretKeyPointer stackPublicKeyPointer;

    stackPublicKeyPointer = pkp;
    stackSecretKeyPointer = skp;

    _crypto_kem_keypair_derand_jazz(pkp, skp, randomnessp[0:2*MLKEM_SYMBYTES]);
    pkp = stackPublicKeyPointer;
    skp = stackSecretKeyPointer;

    skp += MLKEM_SECRETKEYBYTES;
    pkp += MLKEM_PUBLICKEYBYTES;

    stackSecretKeyPointer = skp;
    stackPublicKeyPointer = pkp;

    inline int i;

    for i=0 to X25519_SECRETKEYBYTES/8
    {
        (u64)[skp + i*8] = randomnessp[u64 i + 8]; // randomness offset by 64 bytes / 8
    }
    
    skp = stackSecretKeyPointer;
    scalarmult_base(pkp, skp);

    skp = stackSecretKeyPointer;
    pkp = stackPublicKeyPointer;

    for i=0 to X25519_PUBLICKEYBYTES{
        [skp + i + X25519_PUBLICKEYBYTES] = [pkp + i];
    }
}

#[returnaddress="stack"]
fn _crypto_xkem_enc_derand_jazz(reg u64 ctp, reg u64 shkp, reg u64 pkp, reg ptr u8[2*XWING_SYMBYTES] randomnessp)
{

    stack u8[32] mlkemSharedKeyPointer dhSharedKeyPointer dhCiphertextPointer;

    stack u64 stackPublicKeyPointer stackCiphertextPointer stackSharedKeyPointer stackSharedKeyPointerInitial;

    stackPublicKeyPointer = pkp;
    stackCiphertextPointer = ctp;
    stackSharedKeyPointer = shkp;
    stackSharedKeyPointerInitial = shkp;

    _crypto_kem_enc_derand_jazz(ctp, shkp, pkp, randomnessp[0:MLKEM_SYMBYTES]);

    pkp = stackPublicKeyPointer;
    ctp = stackCiphertextPointer;
    shkp = stackSharedKeyPointer;

    mlkemSharedKeyPointer = __tostack32u8(mlkemSharedKeyPointer, shkp);

    pkp += MLKEM_PUBLICKEYBYTES;
    ctp += MLKEM_CIPHERTEXTBYTES;
    stackPublicKeyPointer = pkp;
    
    inline int i;

    for i=0 to X25519_EPHBYTES/8
    {
        (u64)[shkp + i*8] = randomnessp[u64 i + 4]; // randomness offset by 32 bytes / 8
    }

    stackCiphertextPointer = ctp;
    stackSharedKeyPointer = shkp;
    scalarmult_base(ctp, shkp);
    ctp = stackCiphertextPointer;
    shkp = stackSharedKeyPointer;

    reg u64 dhEphemeralKeyPointer;
    dhEphemeralKeyPointer = shkp;

    dhCiphertextPointer = __tostack32u8(dhCiphertextPointer, ctp);
    dhSharedKeyPointer = __tostack32u8(dhSharedKeyPointer, shkp);

    pkp = stackPublicKeyPointer;
    shkp = stackSharedKeyPointerInitial;
    stackSharedKeyPointer = shkp;

    scalarmult(shkp, dhEphemeralKeyPointer, pkp);
    pkp = stackPublicKeyPointer;
    shkp = stackSharedKeyPointer;

    dhSharedKeyPointer = __tostack32u8(dhSharedKeyPointer, shkp);
    
    reg u64 inputLength;
    inputLength = XWING_PRFINPUT;
    stack u8[XWING_PRFINPUT] inputBuffer;
    stack u8[XWING_SYMBYTES] sstackdhPublicKeyPointer;

    sstackdhPublicKeyPointer = __tostack32u8(sstackdhPublicKeyPointer, pkp);
    
    inline int i j k l p;

    for i=0 to 6{
        inputBuffer[i] = label[i];
    }

    for i=0 to XWING_SYMBYTES{
        l = i + 6;
        j = l + MLKEM_SSBYTES;
        k = j + X25519_CIPHERTEXTBYTES;
        p = k +  X25519_PUBLICKEYBYTES; 
        inputBuffer[l] = mlkemSharedKeyPointer[i];
        inputBuffer[j] = dhSharedKeyPointer[i];
        inputBuffer[k] = dhCiphertextPointer[i];
        inputBuffer[p] = sstackdhPublicKeyPointer[i];
    }
    
    reg u64 inputRegister;
    inputRegister = shkp;
    reg ptr u8[32] outRegPointer;
    stack u8[32] outputBuffer;
    outRegPointer = outputBuffer;
    __fromstack134u8(inputRegister, inputBuffer);

    outRegPointer = _sha3_256(outRegPointer, inputRegister, inputLength);
    __fromstack32u8(shkp, outputBuffer);
}

inline
fn __crypto_xkem_dec_jazz(reg u64 shkp, reg u64 ctp, reg u64 skp)
{
    stack u64 stackCiphertextPointer stackSharedKeyPointer stackSharedKeyPointerInitial stackSecretKeyPointer;

    stackSharedKeyPointerInitial = shkp;

    stackCiphertextPointer = ctp;
    stackSecretKeyPointer = skp;
    stackSharedKeyPointer = shkp;
    __crypto_kem_dec_jazz(shkp, ctp, skp);
    
    skp = stackSecretKeyPointer;
    ctp = stackCiphertextPointer;
    shkp = stackSharedKeyPointer;

    ctp += MLKEM_CIPHERTEXTBYTES;
    skp += MLKEM_SECRETKEYBYTES;

    stack u8[MLKEM_SSBYTES] mlkemSharedKeyPointer;
    mlkemSharedKeyPointer = __tostack32u8(mlkemSharedKeyPointer, shkp);

    stackCiphertextPointer = ctp;
    stackSecretKeyPointer = skp;
    stackSharedKeyPointer = shkp;
    scalarmult(shkp, skp, ctp);
    shkp = stackSharedKeyPointerInitial;
    ctp = stackCiphertextPointer;
    skp = stackSecretKeyPointer;

    stack u8[X25519_SECRETKEYBYTES + X25519_PUBLICKEYBYTES] stackdhKeysPointer;
    stack u8[X25519_SSBYTES] stackdhSharedKeyPointer stackdhSecretKeyPointer dhCiphertextPointer stackdhPublicKeyPointer;


    stackdhSharedKeyPointer = __tostack32u8(stackdhSharedKeyPointer, shkp);
    dhCiphertextPointer = __tostack32u8(dhCiphertextPointer, ctp);
    stackdhKeysPointer = __tostack64u8(stackdhKeysPointer, skp);
    
    stackdhSecretKeyPointer = stackdhKeysPointer[0:X25519_SECRETKEYBYTES];
    stackdhPublicKeyPointer = stackdhKeysPointer[X25519_SECRETKEYBYTES:X25519_PUBLICKEYBYTES];

    reg u64 inputLength;
    inputLength = XWING_PRFINPUT;
    stack u8[XWING_PRFINPUT] inputBuffer;

    inline int i j k l p;

    for i=0 to 6{
        inputBuffer[i] = label[i];
    }

    for i=0 to XWING_SYMBYTES{
        l = i + 6;
        j = l + MLKEM_SSBYTES;
        k = j + X25519_CIPHERTEXTBYTES;
        p = k +  X25519_PUBLICKEYBYTES; 
        inputBuffer[l] = mlkemSharedKeyPointer[i];
        inputBuffer[j] = stackdhSharedKeyPointer[i];
        inputBuffer[k] = dhCiphertextPointer[i];
        inputBuffer[p] = stackdhPublicKeyPointer[i];
    }

    shkp = stackSharedKeyPointerInitial;

    reg u64 inputRegister;
    inputRegister = shkp;
    reg ptr u8[32] outRegPointer;
    stack u8[32] outputBuffer;
    outRegPointer = outputBuffer;
    __fromstack134u8(inputRegister, inputBuffer);

    outRegPointer = _sha3_256(outRegPointer, inputRegister, inputLength);
    __fromstack32u8(shkp, outputBuffer);

}