from Jade require "crypto_kem/xwing/amd64/ref/params.jinc"
from Jade require "crypto_kem/kyber/kyber768/amd64/ref/kem.jinc"
from Jade require "crypto_kem/xwing/amd64/ref/scalarmult.jinc"
from Jade require "crypto_hash/sha3-256/amd64/ref/sha3-256.jinc"
from Jade require "common/tofromstack.jinc"

#[returnaddress="stack"]
fn _crypto_xkem_keypair_derand_jazz(reg u64 pkp, reg u64 skp, reg ptr u8[3*XWING_SYMBYTES] randomnessp)
{
    stack ptr u8[XWING_SYMBYTES*3] s_randomnessp;
    reg ptr u8[XWING_SYMBYTES*2] randomnessp1;
    reg ptr u8[XWING_SYMBYTES] randomnessp2;

    stack u64 s_skp s_pkp;

    s_randomnessp = randomnessp;
    s_pkp = pkp;
    s_skp = skp;
    randomnessp1 = randomnessp[0:XWING_SYMBYTES*2];

    _crypto_kem_keypair_derand_jazz(pkp, skp, randomnessp1);
    pkp = s_pkp;
    skp = s_skp;
    skp += MLKEM_SECRETKEYBYTES;
    pkp += MLKEM_PUBLICKEYBYTES;

    stack u64 s_skp, s_pkp;
    s_skp = skp;
    s_pkp = pkp;


    randomnessp = s_randomnessp;
    randomnessp2 = randomnessp[XWING_SYMBYTES:XWING_SYMBYTES];
    __fromstack32u8(skp, randomnessp2);
    
    skp = s_skp;
    scalarmult_base(pkp, skp);

    skp = s_skp;
    pkp = s_pkp;

    inline int i;

    for i=0 to X25519_PUBLICKEYBYTES/8{
        [skp + i*8 + X25519_PUBLICKEYBYTES] = [pkp + i*8];
    }
}

#[returnaddress="stack"]
fn _crypto_xkem_enc_derand_jazz(reg u64 ctp, reg u64 shkp, reg u64 pkp, reg ptr u8[2*XWING_SYMBYTES] randomnessp)
{
    stack ptr u8[XWING_SYMBYTES*2] s_randomnessp;
    reg ptr u8[XWING_SYMBYTES] randomnessp1 randomnessp2;

    reg u64 t64;
    stack u8[32] shmlkem shdh;

    stack u64 s_pkp s_ctp s_shkp s_shkp2;

    s_randomnessp = randomnessp;
    s_pkp = pkp;
    s_ctp = ctp;
    s_shkp = shkp;
    s_shkp2 = shkp;

    randomnessp1 = randomnessp[0:XWING_SYMBYTES];
    _crypto_kem_enc_derand_jazz(ctp, shkp, pkp, randomnessp1);

    pkp = s_pkp;
    ctp = s_ctp;
    shkp = s_shkp;
    shmlkem = __tostack32u8(shmlkem, shkp);
    shkp = s_shkp;

    ctp += MLKEM_CIPHERTEXTBYTES;
    
    randomnessp = s_randomnessp;
    randomnessp2 = randomnessp[XWING_SYMBYTES:XWING_SYMBYTES];
    __fromstack32u8(shkp, randomnessp2);
    shkp = s_shkp;

    scalarmult_base(ctp, shkp);

    shkp = s_shkp;
    t64 = shkp;
    ctp = s_ctp;


    pkp = s_pkp;
    shkp = s_shkp2;
    s_shkp = shkp;

    scalarmult(shkp, t64, pkp);
    
    shkp = s_shkp;
    shdh = __tostack32u8(shdh, shkp);
    shkp = s_shkp2;
    pkp = s_pkp;

    pkp += MLKEM_PUBLICKEYBYTES;


    stack u64 inlen;
    inlen = XWING_PRFINPUT;
    stack u8[134] in;
    stack u8[XWING_SYMBYTES] sdhpkp;

    sdhpkp = __tostack32u8(sdhpkp, pkp);
    
    inline int i j k l;

    for i=0 to 6{
        in[i] = label[i];
    }

    for i=0 to XWING_SYMBYTES{
        l = i + 6;
        j = i + X25519_SSBYTES + 6;
        k = i + X25519_PUBLICKEYBYTES + X25519_SSBYTES + 6;
        in[l] = shmlkem[i];
        in[j] = shdh[i];
        in[k] = sdhpkp[i];
    }

    reg u64 inp;
    inp = shkp;
    __fromstack134u8(inp, in);
    __sha3_256_ref(shkp, inp, inlen);
}

inline
fn __crypto_xkem_dec_jazz(reg u64 shkp, reg u64 ctp, reg u64 skp)
{
 


}