param int SHAKE128_RATE = 168;
param int SHAKE256_RATE = 136;
param int SHA3_256_RATE = 136;
param int SHA3_512_RATE = 72;

inline
fn __index(inline int x, inline int y) -> inline int {
  inline int r;
  r = (x % 5) + 5 * (y % 5);
  return r;
}


inline
fn __ROL64(reg u64 x, inline int c) -> reg u64 {
  reg u64 y;
  _, _, y = #ROL_64(x, c);
  return y;
}

inline
fn __theta(reg ptr u64[25] a) -> reg ptr u64[25] {
  inline int x, y;
  reg u64[5] c, d;

  for x = 0 to 5 {
    c[x] = 0;
    for y = 0 to 5 {
      c[x] ^= a[x + 5 * y];
    }
  }

  for x = 0 to 5 {
    /* d[x] = __ROL64(c[(x + 1) % 5], 1); */
    /* extraction fails */

    /*    _, _, d[x] = #ROL_64(c[(x + 1) % 5], 1);*/
    /*    d[x] ^= c[(x + 4) % 5];*/
    /* does not compile */

    d[x] = c[(x + 1) % 5];
    _, _, d[x] = #ROL_64(d[x], 1);
    d[x] ^= c[(x + 4) % 5];
  }

  for x = 0 to 5 {
    for y = 0 to 5 {
      a[x + 5 * y] ^= d[x];
    }
  }

  return a;
}


inline
fn __keccakRhoOffsets(inline int i) -> inline int {
  inline int r, x, y, z, t;

  r = 0;
  x = 1;
  y = 0;
  for t = 0 to 24 {
    if (i == x + 5 * y) {
      r = ((t + 1) * (t + 2) / 2) % 64;
    }
    z = (2 * x + 3 * y) % 5;
    x = y;
    y = z;
  }

  return r;
}


inline
fn __rho(reg ptr u64[25] a) -> reg ptr u64[25] {
  inline int x, y, i, z;

  for x = 0 to 5 {
    for y = 0 to 5 {
      i = __index(x, y);
      z = __keccakRhoOffsets(i);
      _, _, a[i] = #ROL_64(a[i], z);
    }
  }

  return a;
}


inline
fn __pi(reg ptr u64[25] a) -> reg ptr u64[25] {
  stack u64[25] b;
  reg u64 t;
  inline int x, y, i;
  for i = 0 to 25 { t = a[i]; b[i] = t; }

  for x = 0 to 5 {
    for y = 0 to 5 {
      t = b[x + 5 * y];
      i = __index(y, 2 * x + 3 * y);
      a[i] = t;
    }
  }
  return a;
}


inline
fn __chi(reg ptr u64[25] a) -> reg ptr u64[25] {
  inline int x, y, i;
  reg u64[5] c;
  for y = 0 to 5 {
    for x = 0 to 5 {
      i = __index(x + 1, y);
      c[x] = a[i];
      c[x] = !c[x];
      i = __index(x + 2, y);
      c[x] &= a[i];
      i = __index(x, y);
      c[x] ^= a[i];
    }
    for x = 0 to 5 {
      a[x + 5 * y] = c[x];
    }
  }
  return a;
}


inline
fn __iota(reg ptr u64[25] a, reg u64 c) -> reg ptr u64[25] {
  a[0] ^= c;
  return a;
}

u64[24] roundconstants = {0x0000000000000001, 0x0000000000008082, 0x800000000000808a, 0x8000000080008000, 
                          0x000000000000808b, 0x0000000080000001, 0x8000000080008081, 0x8000000000008009, 
                          0x000000000000008a, 0x0000000000000088, 0x0000000080008009, 0x000000008000000a, 
                          0x000000008000808b, 0x800000000000008b, 0x8000000000008089, 0x8000000000008003, 
                          0x8000000000008002, 0x8000000000000080, 0x000000000000800a, 0x800000008000000a, 
                          0x8000000080008081, 0x8000000000008080, 0x0000000080000001, 0x8000000080008008};


fn __keccakf1600_ref(reg ptr u64[25] state) -> reg ptr u64[25] {
  reg ptr u64[24] constptr;

  reg u64 rctr;
  
  constptr = roundconstants;
  rctr = 0;

  while (rctr < 192) {
    state = __theta(state);
    state = __rho(state);
    state = __pi(state);
    state = __chi(state);
    constptr = roundconstants;
    state = __iota(state, constptr.[(int)rctr]);
    rctr += 8;
  }

  return state;
}


inline
fn __st0(reg ptr u64[25] state) -> reg ptr u64[25]
{
  inline int i;

  for i = 0 to 25 {
    state[i] = 0;
  }

  return state;
}


inline
fn __add_full_block(
  stack u64[25] state,
  reg u64 in,
  reg u64 inlen,
  reg u64 r8
) -> stack u64[25], reg u64, reg u64
{
  reg u64 i t r64;

  r64 = r8;
  r64 >>= 3;
  i = 0;
  while (i < r64)
  {
    t = [in + 8 * i];
    state[(int) i] ^= t;
    i = i + 1;
  }

  in += r8;
  inlen -= r8;

  return state, in, inlen;
}


inline
fn __add_final_block(
  stack u64[25] state,
  reg u64 in,
  reg u64 inlen,
  reg u8 trail_byte,
  reg u64 r8
) -> stack u64[25]
{
  reg u64 i, t, inlen8;
  reg u8 c;

  inlen8 = inlen;
  inlen8 >>= 3;
  i = 0;
  while ( i < inlen8)
  {
    t = [in + 8*i];
    state[(int) i] ^= t;
    i = i + 1;
  }

  i <<= 3;
  while (i < inlen)
  {
    c = (u8)[in + i];
    state[u8 (int) i] ^= c;
    i = i + 1;
  }

  state[u8 (int) i] ^= trail_byte;

  i = r8;
  i -= 1;
  state[u8 (int) i] ^= 0x80;

  return state;
}


inline
fn __xtr_full_block(
  stack u64[25] state,
  reg u64 out,
  reg u64 outlen,
  reg u64 rate
) -> reg u64, reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while (i < rate64)
  {
    t = state[(int) i];
    [out + 8 * i] = t;
    i = i + 1;
  }

  out += rate;
  outlen -= rate;

  return out, outlen;
}


inline
fn ____xtr_bytes(
  stack u64[25] state,
  reg u64 out,
  reg u64 outlen
)
{
  reg u64 i t outlen8;
  reg u8 c;

  outlen8 = outlen;
  outlen8 >>= 3;
  i = 0;
  while (i < outlen8 )
  {
    t = state[(int) i];
    [out + 8 * i] = t;
    i = i + 1;
  }
  i <<= 3;

  while (i < outlen)
  {
    c = state[u8 (int) i];
    (u8)[out + i] = c;
    i = i + 1;
  }
}


inline
fn ____keccak1600_ref(
  stack u64 s_out s_outlen,
  reg   u64 in inlen,
  stack u64 s_trail_byte,
  reg   u64 rate
)
{
  stack u64[25] state;
  stack u64 s_in, s_inlen, s_rate;
  reg u64 out, outlen, t;
  reg u8 trail_byte;

  state = __st0(state);

  while ( inlen >= rate )
  {
    state, in, inlen = __add_full_block(state, in, inlen, rate);

    s_in = in;
    s_inlen = inlen;
    s_rate = rate;

    state = __keccakf1600_ref(state);

    inlen = s_inlen;
    in = s_in;
    rate = s_rate;
  }

  t = s_trail_byte;
  trail_byte = (8u) t;
  state = __add_final_block(state, in, inlen, trail_byte, rate);

  outlen = s_outlen;

  while ( outlen > rate )
  {
    s_outlen = outlen;
    s_rate = rate;

    state = __keccakf1600_ref(state);

    out = s_out;
    outlen = s_outlen;
    rate = s_rate;

    out, outlen = __xtr_full_block(state, out, outlen, rate);
    s_outlen = outlen;
    s_out = out;
  }

  state = __keccakf1600_ref(state);
  out = s_out;
  outlen = s_outlen;

  ____xtr_bytes(state, out, outlen);
}


inline
fn __keccak1600_ref(reg u64 out outlen in inlen, stack u64[2] config)
{
  stack u64 s_trail_byte;
  stack u64 s_out s_outlen;
  reg   u64   trail_byte;
  reg   u64   rate;

  s_out = out;
  s_outlen = outlen;

  trail_byte = config[0];
  s_trail_byte = trail_byte;

  rate = config[1];

  ____keccak1600_ref(s_out, s_outlen, in, inlen, s_trail_byte, rate);
}

inline
fn __shake256(reg u64 out outlen in inlen)
{
  reg u64 ds;
  reg u64 rate;
  stack u64[2] config;
  ds = 0x1f;
  rate = SHAKE256_RATE;
  config[0] = ds;
  config[1] = rate;
  __keccak1600_ref(out, outlen, in, inlen, config);
}


fn _shake256_128_33(reg ptr u8[128] out, reg const ptr u8[33] in) -> stack u8[128]
{
  stack u64[25] state;
  reg u8 c;
  inline int i;

  stack ptr u8[128] sout;

  sout = out;

  state = __st0(state);

  for i = 0 to 33 {
    c = in[i];
    state[u8 i] ^= c;
  }
  state[u8 33] ^= 0x1f;
  state[u8 SHAKE256_RATE-1] ^= 0x80;
    
  state = __keccakf1600_ref(state);

  out = sout; 

  for i = 0 to 128 {
    c = state[u8 (int) i];
    out[i] = c;
  }
  return out;
}

fn _shake256_1120_32(reg u64 out, reg u64 in0 in1) {
  stack u64[25] state;
  stack u64 s_out;
  stack u64 s_in s_ilen s_r8;
  reg u64 ilen r8 t64 in;
  reg u8 t8;
  inline int i;

  s_out = out;
  state = __st0(state);

  for i = 0 to MLKEM_SYMBYTES/8 {
    t64 = (u64)[in0 + i*8];
    state[u64 i] ^= t64;
  }

  for i = MLKEM_SYMBYTES/8 to SHAKE256_RATE/8 {
    t64 = (u64)[in1 + (i-MLKEM_SYMBYTES/8)*8];
    state[u64 i] ^= t64;
  }
      
  state = __keccakf1600_ref(state);

  r8 = SHAKE256_RATE;
  ilen = MLKEM_CT_LEN - (SHAKE256_RATE - MLKEM_SYMBYTES);
  in = in1;
  in += SHAKE256_RATE - MLKEM_SYMBYTES;

  while(ilen >= r8)
  {
    state, in, ilen = __add_full_block(state, in, ilen, r8);

    s_in = in;
    s_ilen = ilen;
    s_r8 = r8;

    state = __keccakf1600_ref(state);

    in = s_in;
    ilen = s_ilen;
    r8 = s_r8;
  }

  t8 = 0x1f;
  state = __add_final_block(state, in, ilen, t8, r8);

  state = __keccakf1600_ref(state);

  out = s_out;

  for i=0 to MLKEM_SYMBYTES/8
  {
    t64 = state[i];
    (u64)[out + 8*i] = t64;
  }

}


fn _sha3512_32(reg ptr u8[64] out, reg const ptr u8[32] in) -> stack u8[64]
{
  stack u64[25] state;
  reg u8 c;
  inline int i;

  state = __st0(state);

  for i = 0 to 32 {
    c = in[i];
    state[u8 i] ^= c;
  }
  state[u8 32] ^= 0x06;
  state[u8 SHA3_512_RATE-1] ^= 0x80;
    
  state = __keccakf1600_ref(state);

  for i = 0 to 64 {
    c = state[u8 (int) i];
    out[i] = c;
  }
  return out;
}


fn _shake128_absorb34(reg ptr u64[25] state, reg const ptr u8[34] in) -> reg ptr u64[25]
{
  reg u8 c;
  inline int i;

  state = __st0(state);

  for i = 0 to 34 {
    c = in[i];
    state[u8 i] ^= c;
  }
  state[u8 34] ^= 0x1f;
  state[u8 SHAKE128_RATE-1] ^= 0x80;

  return state;
}


fn _shake128_squeezeblock(reg ptr u64[25] state, reg ptr u8[SHAKE128_RATE] out) -> reg ptr u64[25], reg ptr u8[SHAKE128_RATE]
{
  reg u8 c;
  inline int i;

  state = __keccakf1600_ref(state);

  for i = 0 to SHAKE128_RATE {
    c = state[u8 (int) i];
    out[i] = c;
  }
  return state, out;
}


#[returnaddress="stack"]
fn _isha3_256(reg ptr u8[32] out, reg u64 in inlen) -> reg ptr u8[32]
{
  stack u64[25] state;
  stack ptr u8[32] s_out;
  stack u64 s_in s_ilen s_r8;
  reg u64 ilen r8 t64;
  reg u8 t8;
  inline int i;

  s_out = out;

  state = __st0(state);

  r8 = SHA3_256_RATE;
  ilen = inlen;

  while(ilen >= r8)
  {
    state, in, ilen = __add_full_block(state, in, ilen, r8);

    s_in = in;
    s_ilen = ilen;
    s_r8 = r8;

    state = __keccakf1600_ref(state);

    in = s_in;
    ilen = s_ilen;
    r8 = s_r8;
  }

  t8 = 0x06;
  state = __add_final_block(state, in, ilen, t8, r8);

  state = __keccakf1600_ref(state);

  out = s_out;

  for i=0 to 4
  {
    t64 = state[i];
    out[u64 i] = t64;
  }

  return out;
}

#[returnaddress="stack"]
fn _isha3_256_32(reg ptr u8[32] out, reg ptr u8[MLKEM_SYMBYTES] in) -> reg ptr u8[32]
{
  stack u64[25] state;
  stack ptr u8[32] s_out;
  reg u64 t64;
  inline int i;

  s_out = out;

  state = __st0(state);

  for i=0 to MLKEM_SYMBYTES/8
  {
    t64 = in[u64 i];
    state[u64 i] = t64;
  }

  state[u8 MLKEM_SYMBYTES] ^= 0x06;
  state[u8 SHA3_256_RATE - 1] = 0x80;

  state = __keccakf1600_ref(state);

  out = s_out;

  for i=0 to 4
  {
    t64 = state[i];
    out[u64 i] = t64;
  }

  return out;
}

#[returnaddress="stack"]
fn _sha3_512_64(reg ptr u8[64] out, reg const ptr u8[64] in) -> stack u8[64]
{
  stack u64[25] state;
  stack ptr u8[64] out_s;
  reg u64 t64;
  inline int i;

  state = __st0(state);

  for i = 0 to 8
  {
    t64 = in[u64 i];
    state[i] ^= t64;
  }

  state[u8 64] ^= 0x06;
  state[u8 SHA3_512_RATE - 1] ^= 0x80;

  out_s = out;

  state = __keccakf1600_ref(state);

  out = out_s;

  for i = 0 to 8
  {
    t64 = state[i];
    out[u64 i] = t64;
  }

  return out;
}

