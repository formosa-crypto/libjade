require "fips202.jinc"
require "params.jinc"

inline
fn __rej_uniform(stack u16[MLKEM_N] rp, reg u64 offset, stack u8[SHAKE128_RATE] buf) ->  reg u64, stack u16[MLKEM_N]
{
  reg u16 val1 val2;
  reg u16 t;
  reg u64 pos ctr;


  ctr = offset;
  pos = 0;

  while (pos < SHAKE128_RATE - 2) {
    if ctr < MLKEM_N {
      val1 = (16u)buf[pos];
      t   = (16u)buf[pos + 1];
      val2 = t;
      val2 >>= 4;
      t &= 0x0F;
      t <<= 8;
      val1 |= t;

      t   = (16u)buf[pos + 2];
      t <<= 4;
      val2 |= t;
      pos += 3;

      reg bool cond;
      #[declassify]
      cond = val1 < MLKEM_Q;
      if cond {
        rp[ctr] = val1;
        ctr += 1;
      }

      #[declassify]
      cond = val2 < MLKEM_Q;
      if cond {
        if(ctr < MLKEM_N)
        {
          rp[ctr] = val2;
          ctr += 1;
        }
      }
    } else {
      pos = SHAKE128_RATE;
    }
  }

  return ctr, rp;
}

inline
fn __gen_matrix(stack u8[MLKEM_SYMBYTES] seed, reg u64 transposed) -> stack u16[MLKEM_K*MLKEM_VECN]
{
  stack u8[34] extseed;
  stack u8[SHAKE128_RATE] buf;
  stack u64[25] state;
  stack u16[MLKEM_N] poly;
  stack u16[MLKEM_K*MLKEM_VECN] r;

  reg u8 c;
  reg u16 t;
  reg u64 ctr k;
  stack u64 sctr;
  stack u64 stransposed;
  inline int j i;

  stransposed = transposed;

  for j = 0 to MLKEM_SYMBYTES
  {
    c = seed[j];
    extseed[j] = c;
  }

  for i=0 to MLKEM_K
  {
    for j = 0 to MLKEM_K
    {
      transposed = stransposed;
      if(transposed == 0)
      {
        extseed[MLKEM_SYMBYTES] = j;
        extseed[MLKEM_SYMBYTES+1] = i;
      }
      else
      {
        extseed[MLKEM_SYMBYTES] = i;
        extseed[MLKEM_SYMBYTES+1] = j;
      }

      state = _shake128_absorb34(state, extseed);

      ctr = 0;
      while (ctr < MLKEM_N)
      {
        sctr = ctr;
        state, buf = _shake128_squeezeblock(state, buf);
        ctr = sctr;
        ctr, poly  = __rej_uniform(poly, ctr, buf);
      }

      k = 0;
      reg ptr u16[MLKEM_N] rij;
      rij = r[i * MLKEM_VECN + j * MLKEM_N : MLKEM_N];
      while (k < MLKEM_N)
      {
        t = poly[(int) k];
        rij[k] = t;
        k += 1;
      }
      r[i * MLKEM_VECN + j * MLKEM_N : MLKEM_N] = rij;
    }
  }
  return r;
}
