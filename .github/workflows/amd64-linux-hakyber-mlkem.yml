name: amd64-linux-hakyber-mlkem

on:
  workflow_dispatch:
  push:
    branches:
      - feature/hakyber_mlkem
  pull_request:

jobs:



  compile:
    runs-on: [self-hosted, linux, X64, amd64-main]
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: compile
        run: JASMIN=$(which_jasminc) make -j$JOBS -C src/ CI=1 FILTER=./crypto_kem/mlkem/% default
      - name: print logs
        run: JASMIN=$(which_jasminc) make -C src/ CI=1 FILTER=crypto_kem/mlkem/% reporter
      - name: return error if there are any errors
        run: make -C src/ CI=1 FILTER=./crypto_kem/mlkem/% err

      - name: libjade-logs-src.tar.gz - contains non-empty logs and errors
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: libjade-logs-src.tar.gz
          path: src/libjade-logs-src.tar.gz



  test:
    needs: [compile]
    runs-on: [self-hosted, linux, X64, amd64-main]
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: compile src
        run: JASMIN=$(which_jasminc) make -j$JOBS -C src/  CI=1 FILTER=./crypto_kem/mlkem/% default

      - name: compile tests
        run: JASMIN=$(which_jasminc) make -j$JOBS -C test/ CI=1 FILTER=../src/crypto_kem/mlkem/% default

      - name: print logs
        run: JASMIN=$(which_jasminc) make -C test/ CI=1 FILTER=../src/crypto_kem/mlkem/% reporter

      - name: return error if there are any errors
        run: make -C test/ CI=1 FILTER=../src/crypto_kem/mlkem/% err

      - name: libjade-logs-test.tar.gz - contains non-empty logs and errors
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: libjade-logs-test.tar.gz
          path: test/libjade-logs-test.tar.gz



  bench1:
    needs: [compile]
    runs-on: [self-hosted, linux, X64, amd64-main]
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: compile
        run: JASMIN=$(which_jasminc) make -j$JOBS -C src/   CI=1 FILTER=./crypto_kem/mlkem/% default

      - name: run
        run: JASMIN=$(which_jasminc) make -j$JOBS -C bench/ CI=1 FILTER=../src/crypto_kem/mlkem/% DEFINE='-DTIMINGS=10' run

      - name: print logs
        run: JASMIN=$(which_jasminc) make -C bench/ CI=1 FILTER=../src/crypto_kem/mlkem/% reporter

      - name: return error if there are any errors
        run: make -C bench/ CI=1 FILTER=../src/crypto_kem/mlkem/% err

      - name: libjade-logs-bench.tar.gz - contains non-empty logs and errors
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: libjade-logs-bench1.tar.gz
          path: bench/libjade-logs-bench.tar.gz



  bench2:
    needs: [compile]
    runs-on: [self-hosted, linux, X64, amd64-main]
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: compile
        run: JASMIN=$(which_jasminc) make -j$JOBS -C src/   CI=1 FILTER=./crypto_kem/mlkem/% default

      - name: run
        run: JASMIN=$(which_jasminc) make -j$JOBS -C bench/ CI=1 FILTER=../src/crypto_kem/mlkem/% run DEFINE='-DTIMINGS=10 -DRUNS=2 -DST_ON' RANDINC='../test/common/' RANDLIB='../test/common/notrandombytes.c';

      - name: print logs
        run: JASMIN=$(which_jasminc) make -C bench/ CI=1 FILTER=../src/crypto_kem/mlkem/% reporter

      - name: return error if there are any errors
        run: make -C bench/ CI=1 FILTER=../src/crypto_kem/mlkem/% err

      - name: libjade-logs-bench.tar.gz - contains non-empty logs and errors
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: libjade-logs-bench2.tar.gz
          path: bench/libjade-logs-bench.tar.gz


