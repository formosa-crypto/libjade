name: amd64-linux-main

on:
  workflow_dispatch:
  push:
    branches:
      - feature/clear-stack
  pull_request:

jobs:

  compile-clear-stack:
    runs-on: [self-hosted, linux, X64, amd64-main]

    strategy:
      matrix:
        stack_zeroization:
          - loop
          - loopSCT
          - unrolled
        stack_zeroization_size:
          - u8
          - u16
          - u32
          - u64
          - u128
          - u256
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: compile
        run: JASMIN=$(which_jasminc) make -j$JOBS -C src/ CI=1 JFLAGS="-stack-zeroization ${{ matrix.stack_zeroization }} -stack-zeroization-size ${{ matrix.stack_zeroization_size }}" default

      - name: print logs
        run: JASMIN=$(which_jasminc) make -C src/ CI=1 reporter

      - name: return error if there are any errors
        run: make -C src/ CI=1 err

      - name: libjade-logs-src-clear-stack-loop.tar.gz - contains non-empty logs and errors
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: libjade-logs-src-clear-stack-loop.tar.gz
          path: src/libjade-logs-src.tar.gz





  test-clear-stack:
    runs-on: [self-hosted, linux, X64, amd64-main]

    strategy:
      matrix:
        stack-zeroization:
          - loop
          - loopSCT
          - unrolled
        stack-zeroization-size:
          - u8
          - u16
          - u32
          - u64
          - u128
          - u256
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: compile and run
        run: JASMIN=$(which_jasminc) make -j$JOBS -C test/ CI=1 JFLAGS="-stack-zeroization ${{ matrix.stack_zeroization }} -stack-zeroization-size ${{ matrix.stack_zeroization_size }}" EXCLUDE=crypto_sign/falcon/falcon512/amd64/avx2/ default
      - name: print logs
        run: JASMIN=$(which_jasminc) make -C test/ CI=1 reporter

      - name: return error if there are any errors
        run: make -C test/ CI=1 err

      - name: libjade-logs-test-clear-stack-loop.tar.gz - contains non-empty logs and errors
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: libjade-logs-test-clear-stack-loop.tar.gz
          path: test/libjade-logs-test.tar.gz


